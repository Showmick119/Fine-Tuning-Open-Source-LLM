[
  {
    "instruction": "Create a FastAPI POST endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@router.post(\"/history\")\ndef history(input: ChatHistoryInput) -> ChatHistory:\n    \"\"\"\n    Get chat history.\n    \"\"\"\n    # TODO: Hard-coding DEFAULT_AGENT here is wonky\n    agent: Pregel = get_agent(DEFAULT_AGENT)\n    try:\n        state_snapshot = agent.get_state(\n            config=RunnableConfig(configurable={\"thread_id\": input.thread_id})\n        )\n        messages: list[AnyMessage] = state_snapshot.values[\"messages\"]\n        chat_messages: list[ChatMessage] = [langchain_to_chat_message(m) for m in messages]\n        return ChatHistory(messages=chat_messages)\n    except Exception as e:\n        logger.error(f\"An exception occurred: {e}\")\n        raise HTTPException(status_code=500, detail=\"Unexpected error\")",
    "category": "endpoints",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post"
    ],
    "source_repo": "JoshuaC215/agent-service-toolkit",
    "source_file": "src/service/service.py",
    "complexity_score": 24
  },
  {
    "instruction": "Create a FastAPI POST endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "    @app.post(\n        \"/call\",\n        operation_id=\"call\",\n        response_model=opyrator.output_type,\n        # response_model_exclude_unset=True,\n        summary=\"Execute the opyrator.\",\n        status_code=status.HTTP_200_OK,\n    )\n    def call(input: opyrator.input_type) -> Any:  # type: ignore\n        \"\"\"Executes this opyrator.\"\"\"\n        return opyrator(input)",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post"
    ],
    "source_repo": "ml-tooling/opyrator",
    "source_file": "src/opyrator/api/fastapi_app.py",
    "complexity_score": 11
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "    @app.get(\n        \"/info\",\n        operation_id=\"info\",\n        response_model=Dict,\n        # response_model_exclude_unset=True,\n        summary=\"Get info metadata.\",\n        status_code=status.HTTP_200_OK,\n    )\n    def info() -> Any:  # type: ignore\n        \"\"\"Returns informational metadata about this Opyrator.\"\"\"\n        return {}",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "ml-tooling/opyrator",
    "source_file": "src/opyrator/api/fastapi_app.py",
    "complexity_score": 11
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "    @app.get(\"/\", include_in_schema=False)\n    def root() -> Any:\n        return RedirectResponse(\"./docs\")",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "ml-tooling/opyrator",
    "source_file": "src/opyrator/api/fastapi_app.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/health\", include_in_schema=False)\ndef health_check():\n    return {'status': 'ok'}",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "paulpierre/RasaGPT",
    "source_file": "app/api/main.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/org\", response_model=List[OrganizationRead])\ndef read_organizations():\n    '''\n    ## Get all active organizations\n\n    Returns:\n        List[OrganizationRead]: List of organizations\n\n    '''\n    with Session(get_engine()) as session:\n        orgs = session.exec(select(Organization).where(Organization.status == ENTITY_STATUS.ACTIVE.value)).all()\n        return orgs",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "paulpierre/RasaGPT",
    "source_file": "app/api/main.py",
    "complexity_score": 15
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.post(\"/org\", response_model=Union[OrganizationRead, Any])\ndef create_organization(\n    *,\n    session: Session = Depends(get_session),\n    organization: Optional[OrganizationCreate] = None,\n    namespace: Optional[str] = None,\n    display_name: Optional[str] = None\n):\n    '''\n\n    ### Creates a new organization\n    ### <u>Args:</u>\n    - **namespace**: Unique namespace for the organization (ex. openai)\n    - **name**: Name of the organization (ex. OpenAI)\n    - **bot_url**: URL of the bot (ex. https://t.me/your_bot)\n\n    ### <u>Returns:</u>\n    - OrganizationRead\n    ---\n    <details><summary>üëá üíª Code examples:</summary>\n    ### üñ•Ô∏è Curl\n    ```bash\n    curl -X POST \"http://localhost:8888/org\" -H \"accept: application/json\" -H \"Content-Type: application/json\" -d '{\\\"namespace\\\":\\\"openai\\\",\\\"name\\\":\\\"OpenAI\\\",\\\"bot_url\\\":\\\"https://t.me/your_bot\\\"}'\n    ```\n    <br/>\n    ### üêç Python\n    ```python\n    import requests\n    response = requests.post(\"http://localhost:8888/org\", json={\"namespace\":\"openai\",\"name\":\"OpenAI\",\"bot_url\":\"https://t.me/your_bot\"})\n    print(response.json())\n    ```\n    </details>\n    '''\n    # Create organization\n    return create_org_by_org_or_uuid(\n        organization=organization,\n        namespace=namespace,\n        display_name=display_name, session=session\n    )",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "paulpierre/RasaGPT",
    "source_file": "app/api/main.py",
    "complexity_score": 45
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/org/{organization_id}\", response_model=Union[OrganizationRead, Any])\ndef read_organization(\n    *,\n    session: Session = Depends(get_session),\n    organization_id: str\n):\n\n    organization = get_org_by_uuid_or_namespace(organization_id, session=session)\n\n    return organization",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "paulpierre/RasaGPT",
    "source_file": "app/api/main.py",
    "complexity_score": 16
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.put(\"/org/{organization_id}\", response_model=Union[OrganizationRead, Any])\ndef update_organization(\n    *,\n    session: Session = Depends(get_session),\n    organization_id: str,\n    organization: OrganizationUpdate\n):\n\n    org = get_org_by_uuid_or_namespace(organization_id, session=session)\n\n    org.update(organization.dict(exclude_unset=True))\n    return org",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "put",
      "authentication",
      "database"
    ],
    "source_repo": "paulpierre/RasaGPT",
    "source_file": "app/api/main.py",
    "complexity_score": 18
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/project\", response_model=List[ProjectReadList])\ndef read_projects(\n    *,\n    session: Session = Depends(get_session),\n    organization_id: str\n):\n\n    organization = get_org_by_uuid_or_namespace(organization_id, session=session)\n\n    if not organization.projects:\n        raise HTTPException(status_code=404, detail='No projects found for organization')\n\n    return organization.projects",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "paulpierre/RasaGPT",
    "source_file": "app/api/main.py",
    "complexity_score": 21
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.post(\"/project\", response_model=Union[ProjectRead, Any])\ndef create_project(\n    *,\n    session: Session = Depends(get_session),\n    organization_id: str,\n    project: ProjectCreate\n):\n    return create_project_by_org(\n        organization_id=organization_id,\n        project=project,\n        session=session\n    )",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "paulpierre/RasaGPT",
    "source_file": "app/api/main.py",
    "complexity_score": 18
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/project/{project_id}\", response_model=Union[ProjectRead, Any])\ndef read_project(\n    *,\n    session: Session = Depends(get_session),\n    organization_id: str,\n    project_id: str\n):\n\n    return get_project_by_uuid(uuid=project_id, organization_id=organization_id, session=session)",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "paulpierre/RasaGPT",
    "source_file": "app/api/main.py",
    "complexity_score": 15
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/document\", response_model=List[DocumentReadList])\ndef read_documents(\n    *,\n    session: Session = Depends(get_session),\n    organization_id: str,\n    project_id: str\n):\n    return get_documents_by_project_and_org(project_id=project_id, organization_id=organization_id, session=session)",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "paulpierre/RasaGPT",
    "source_file": "app/api/main.py",
    "complexity_score": 14
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/document/{document_id}\", response_model=DocumentRead)\ndef read_document(\n    *,\n    session: Session = Depends(get_session),\n    organization_id: str,\n    project_id: str,\n    document_id: str\n):\n    return get_document_by_uuid(uuid=document_id, project_id=project_id, organization_id=organization_id, session=session)",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "paulpierre/RasaGPT",
    "source_file": "app/api/main.py",
    "complexity_score": 15
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/user\", response_model=List[UserReadList])\ndef read_users(\n    *,\n    session: Session = Depends(get_session),\n):\n    return get_users(session=session)",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "paulpierre/RasaGPT",
    "source_file": "app/api/main.py",
    "complexity_score": 12
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.post(\"/user\", response_model=UserRead)\ndef create_user(\n    *,\n    session: Session = Depends(get_session),\n    user: UserCreate\n):\n\n    return create_user(\n        user=user,\n        session=session\n    )",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "paulpierre/RasaGPT",
    "source_file": "app/api/main.py",
    "complexity_score": 17
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/user/{user_uuid}\", response_model=UserRead)\ndef read_user(\n    *,\n    session: Session = Depends(get_session),\n    user_id: str\n):\n\n    return get_user_by_uuid_or_identifier(id=user_id, session=session)",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "paulpierre/RasaGPT",
    "source_file": "app/api/main.py",
    "complexity_score": 14
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with Pydantic validation and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@app.put(\"/user/{user_uuid}\", response_model=UserRead)\ndef update_user(*, user_uuid: str, user: UserUpdate):\n\n    # Get user by UUID\n    user = User.get(uuid=user_uuid)\n\n    # If user exists, update it\n    if user:\n        user.update(**user.dict())\n        return user\n\n    # If user doesn't exist, return 404\n    else:\n        raise HTTPException(status_code=404, detail=f'User {user_uuid} not found!')",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "put",
      "pydantic",
      "database"
    ],
    "source_repo": "paulpierre/RasaGPT",
    "source_file": "app/api/main.py",
    "complexity_score": 16
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.post(\"/webhooks/{channel}/webhook\")\ndef get_webhook(\n    *,\n    session: Session = Depends(get_session),\n    channel: str,\n    webhook: WebhookCreate\n):\n    webhook_data = webhook.dict()\n\n    # --------------------\n    # Get webhook metadata\n    # --------------------\n    if channel == 'telegram':\n        rasa_webhook_url = f'{RASA_WEBHOOK_URL}/webhooks/{channel}/webhook'\n        data = process_webhook_telegram(webhook_data)\n        channel = CHANNEL_TYPE.TELEGRAM.value\n        user_data = {\n            'identifier': data['user_id'],\n            'identifier_type': channel,\n            'first_name': data['user_firstname'],\n            'language': data['user_language']\n        }\n        session_metadata = {\n            'update_id': data['update_id'],\n            'username': data['username'],\n            'message_id': data['user_message'],\n            'msg_ts': data['message_ts'],\n            'msg_type': data['message_type'],\n        }\n        user_message = data['user_message']\n    else:\n        # Not a valid channel, return 404\n        raise HTTPException(status_code=404, detail=f'Channel {channel} not a valid webhook channel!')\n\n    chat_session = chat_query(\n        user_message,\n        session=session,\n        channel=channel,\n        identifier=user_data['identifier'],\n        user_data=user_data,\n        meta=session_metadata\n    )\n\n    meta = chat_session.meta\n\n    # -----------------------------------------\n    # Lets add the LLM response to the metadata\n    # -----------------------------------------\n    webhook_data['message']['meta'] = {\n        'response': chat_session.response if chat_session.response else None,\n        'tags': meta['tags'] if 'tags' in meta else None,\n        'is_escalate': meta['is_escalate'] if 'is_escalate' in meta else False,\n        'session_id': meta['session_id'] if 'session_id' in meta else None\n\n    }\n\n    # -----------------------------------\n    # Forward the webhook to Rasa webhook\n    # -----------------------------------\n    res = requests.post(rasa_webhook_url, data=json.dumps(webhook_data))\n    logger.debug(f'[ü§ñ RasaGPT API webhook]\\nPosting data: {json.dumps(webhook_data)}\\n\\n[ü§ñ RasaGPT API webhook]\\nRasa webhook response: {res.text}')\n\n    return {'status': 'ok'}",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "paulpierre/RasaGPT",
    "source_file": "app/api/main.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.post(\"/item\", response_model=ItemInDB)\ndef create_item(\n    *,\n    session: Session = Depends(get_db),\n    user_id: UserID = Depends(get_jwt_user),\n    item: ItemCreate,\n) -> ItemInDB:\n    item_orm = ItemORM(name=item.name, owner=user_id)\n    session.add(item_orm)\n    session.commit()\n    return ItemInDB.from_orm(item_orm)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "fastapiutils/fastapi-utils",
    "source_file": "docs/src/class_based_views1.py",
    "complexity_score": 21
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/item/{item_id}\", response_model=ItemInDB)\ndef read_item(\n    *,\n    session: Session = Depends(get_db),\n    user_id: UserID = Depends(get_jwt_user),\n    item_id: ItemID,\n) -> ItemInDB:\n    item_orm = get_owned_item(session, user_id, item_id)\n    return ItemInDB.from_orm(item_orm)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "fastapiutils/fastapi-utils",
    "source_file": "docs/src/class_based_views1.py",
    "complexity_score": 19
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.put(\"/item/{item_id}\", response_model=ItemInDB)\ndef update_item(\n    *,\n    session: Session = Depends(get_db),\n    user_id: UserID = Depends(get_jwt_user),\n    item_id: ItemID,\n    item: ItemCreate,\n) -> ItemInDB:\n    item_orm = get_owned_item(session, user_id, item_id)\n    item_orm.name = item.name\n    session.add(item_orm)\n    session.commit()\n    return ItemInDB.from_orm(item_orm)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "put",
      "authentication",
      "database"
    ],
    "source_repo": "fastapiutils/fastapi-utils",
    "source_file": "docs/src/class_based_views1.py",
    "complexity_score": 23
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.delete(\"/item/{item_id}\", response_model=APIMessage)\ndef delete_item(\n    *,\n    session: Session = Depends(get_db),\n    user_id: UserID = Depends(get_jwt_user),\n    item_id: ItemID,\n) -> APIMessage:\n    item = get_owned_item(session, user_id, item_id)\n    session.delete(item)\n    session.commit()\n    return APIMessage(detail=f\"Deleted item {item_id}\")",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "fastapiutils/fastapi-utils",
    "source_file": "docs/src/class_based_views1.py",
    "complexity_score": 21
  },
  {
    "instruction": "Create a FastAPI POST endpoint with database integration",
    "input": "Include database operations",
    "output": "    @router.post(\"/item\")\n    def create_item(self, item: ItemCreate) -> ItemInDB:\n        # Step 4: Use `self.<dependency_name>` to access shared dependencies\n        item_orm = ItemORM(name=item.name, owner=self.user_id)\n        self.session.add(item_orm)\n        self.session.commit()\n        return ItemInDB.from_orm(item_orm)",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post",
      "database"
    ],
    "source_repo": "fastapiutils/fastapi-utils",
    "source_file": "docs/src/class_based_views2.py",
    "complexity_score": 7
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "    @router.get(\"/item/{item_id}\")\n    def read_item(self, item_id: ItemID) -> ItemInDB:\n        item_orm = get_owned_item(self.session, self.user_id, item_id)\n        return ItemInDB.from_orm(item_orm)",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "fastapiutils/fastapi-utils",
    "source_file": "docs/src/class_based_views2.py",
    "complexity_score": 4
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with database integration",
    "input": "Include database operations",
    "output": "    @router.put(\"/item/{item_id}\")\n    def update_item(self, item_id: ItemID, item: ItemCreate) -> ItemInDB:\n        item_orm = get_owned_item(self.session, self.user_id, item_id)\n        item_orm.name = item.name\n        self.session.add(item_orm)\n        self.session.commit()\n        return ItemInDB.from_orm(item_orm)",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "put",
      "database"
    ],
    "source_repo": "fastapiutils/fastapi-utils",
    "source_file": "docs/src/class_based_views2.py",
    "complexity_score": 7
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with database integration",
    "input": "Include database operations",
    "output": "    @router.delete(\"/item/{item_id}\")\n    def delete_item(self, item_id: ItemID) -> APIMessage:\n        item = get_owned_item(self.session, self.user_id, item_id)\n        self.session.delete(item)\n        self.session.commit()\n        return APIMessage(detail=f\"Deleted item {item_id}\")",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "delete",
      "database"
    ],
    "source_repo": "fastapiutils/fastapi-utils",
    "source_file": "docs/src/class_based_views2.py",
    "complexity_score": 6
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/default\")\ndef get_resource(resource_id: int) -> str:\n    # the response will be serialized as a JSON number, *not* a string\n    return resource_id",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "fastapiutils/fastapi-utils",
    "source_file": "docs/src/inferring_router1.py",
    "complexity_score": 4
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/sync-me\")\n@cache(namespace=\"test\") # pyright: ignore[reportArgumentType]\ndef sync_me():\n    # as per the fastapi docs, this sync function is wrapped in a thread,\n    # thereby converted to async. fastapi-cache does the same.\n    return 42",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "long2ice/fastapi-cache",
    "source_file": "examples/in_memory/main.py",
    "complexity_score": 6
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/namespaced_injection\")\n@cache(namespace=\"test\", expire=5, injected_dependency_namespace=\"monty_python\") # pyright: ignore[reportArgumentType]\ndef namespaced_injection(\n    __fastapi_cache_request: int = 42, __fastapi_cache_response: int = 17\n) -> Dict[str, int]:\n    return {\n        \"__fastapi_cache_request\": __fastapi_cache_request,\n        \"__fastapi_cache_response\": __fastapi_cache_response,\n    }",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "long2ice/fastapi-cache",
    "source_file": "examples/in_memory/main.py",
    "complexity_score": 9
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/blocking\")\n@cache(namespace=\"test\", expire=10) # pyright: ignore[reportArgumentType]\ndef blocking():\n    time.sleep(2)\n    return {\"ret\": 42}",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "long2ice/fastapi-cache",
    "source_file": "examples/redis/main.py",
    "complexity_score": 5
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.get(\n    \"/\",\n    response_class=HTMLResponse,\n    dependencies=[Depends(pagination_ctx(CursorPage[User]))],\n)\ndef get_page(\n    request: Request,\n    db: Session = Depends(get_db),\n) -> Any:\n    page = paginate(db, select(User).order_by(User.created_at, User.id))\n\n    return templates.TemplateResponse(\n        \"index.html\",\n        {\n            \"request\": request,\n            \"page\": page,\n            \"params\": resolve_params(),\n        },\n    )",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "uriyyo/fastapi-pagination",
    "source_file": "examples/cursor/app.py",
    "complexity_score": 25
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "            @api.get(path, status_code=200, response_model=response_model, dependencies=dependencies)\n            def get_one_by_primary_key(response: Response,\n                                       request: Request,\n                                       url_param=Depends(request_url_param_model),\n                                       query=Depends(request_query_model),\n                                       session=Depends(db_session)):\n\n                join = query.__dict__.pop('join_foreign_table', None)\n                stmt = query_service.get_one(filter_args=query.__dict__,\n                                             extra_args=url_param.__dict__,\n                                             join_mode=join)\n                query_result = execute_service.execute(session, stmt)\n                response_result = parsing_service.find_one(response_model=response_model,\n                                                           sql_execute_result=query_result,\n                                                           fastapi_response=response,\n                                                           session=session,\n                                                           join_mode=join)\n                return response_result",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "LuisLuii/FastAPIQuickCRUD",
    "source_file": "src/fastapi_quickcrud/misc/abstract_route.py",
    "complexity_score": 21
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "            @api.get(path, dependencies=dependencies, response_model=response_model)\n            def get_many(response: Response,\n                         request: Request,\n                         query=Depends(request_query_model),\n                         session=Depends(\n                             db_session)\n                         ):\n                join = query.__dict__.pop('join_foreign_table', None)\n\n                stmt = query_service.get_many(query=query.__dict__, join_mode=join)\n                query_result = execute_service.execute(session, stmt)\n                parsed_response = parsing_service.find_many(response_model=response_model,\n                                                            sql_execute_result=query_result,\n                                                            fastapi_response=response,\n                                                            join_mode=join,\n                                                            session=session)\n                return parsed_response",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "LuisLuii/FastAPIQuickCRUD",
    "source_file": "src/fastapi_quickcrud/misc/abstract_route.py",
    "complexity_score": 20
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "            @api.post(path, status_code=201, response_model=response_model, dependencies=dependencies)\n            def insert_one(\n                    response: Response,\n                    request: Request,\n                    query: request_body_model = Depends(request_body_model),\n                    session=Depends(db_session)\n            ):\n\n                new_inserted_data = query_service.create(insert_arg=query.__dict__)\n\n                execute_service.add_all(session, new_inserted_data)\n\n                try:\n                    execute_service.flush(session)\n                except IntegrityError as e:\n                    err_msg, = e.orig.args\n                    if 'unique constraint' not in err_msg.lower():\n                        raise e\n                    result = Response(status_code=HTTPStatus.CONFLICT)\n                    return result\n                return parsing_service.create_one(response_model=response_model,\n                                                  sql_execute_result=new_inserted_data,\n                                                  fastapi_response=response,\n                                                  session=session)",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "LuisLuii/FastAPIQuickCRUD",
    "source_file": "src/fastapi_quickcrud/misc/abstract_route.py",
    "complexity_score": 32
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "            @api.post(path, status_code=201, response_model=response_model, dependencies=dependencies)\n            def insert_many(\n                    response: Response,\n                    request: Request,\n                    query: request_body_model = Depends(request_body_model),\n                    session=Depends(db_session)\n            ):\n\n                # inserted_data = query.__dict__['insert']\n                update_list = query.__dict__\n                inserted_data = query_service.create(insert_arg=update_list,\n                                                     create_one=False)\n\n                execute_service.add_all(session, inserted_data)\n\n                try:\n                    execute_service.flush(session)\n                except IntegrityError as e:\n                    err_msg, = e.orig.args\n                    if 'unique constraint' not in err_msg.lower():\n                        raise e\n                    result = Response(status_code=HTTPStatus.CONFLICT)\n                    return result\n                return parsing_service.create_many(response_model=response_model,\n                                                   sql_execute_result=inserted_data,\n                                                   fastapi_response=response,\n                                                   session=session)",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "LuisLuii/FastAPIQuickCRUD",
    "source_file": "src/fastapi_quickcrud/misc/abstract_route.py",
    "complexity_score": 35
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "            @api.delete(path, status_code=200, response_model=response_model, dependencies=dependencies)\n            def delete_one_by_primary_key(response: Response,\n                                          request: Request,\n                                          query=Depends(request_query_model),\n                                          request_url_param_model=Depends(request_url_model),\n                                          session=Depends(db_session)):\n                filter_stmt = query_service.model_query(filter_args=request_url_param_model.__dict__,\n                                                        extra_args=query.__dict__,\n                                                        session=session)\n                delete_instance = session.execute(filter_stmt).scalar()\n\n                return parsing_service.delete_one(response_model=response_model,\n                                                  sql_execute_result=delete_instance,\n                                                  fastapi_response=response,\n                                                  session=session)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "LuisLuii/FastAPIQuickCRUD",
    "source_file": "src/fastapi_quickcrud/misc/abstract_route.py",
    "complexity_score": 18
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "            @api.delete(path, status_code=200, response_model=response_model, dependencies=dependencies)\n            def delete_many_by_query(response: Response,\n                                     request: Request,\n                                     query=Depends(request_query_model),\n                                     session=Depends(db_session)):\n                filter_stmt = query_service.model_query(filter_args=query.__dict__,\n                                                        session=session)\n\n                delete_instance = [i for i in session.execute(filter_stmt).scalars()]\n\n                return parsing_service.delete_many(response_model=response_model,\n                                                   sql_execute_results=delete_instance,\n                                                   fastapi_response=response,\n                                                   session=session)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "LuisLuii/FastAPIQuickCRUD",
    "source_file": "src/fastapi_quickcrud/misc/abstract_route.py",
    "complexity_score": 17
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "            @api.post(\"\", status_code=303, response_class=Response, dependencies=dependencies)\n            def create_one_and_redirect_to_get_one_api_with_primary_key(\n                    request: Request,\n                    insert_args: request_body_model = Depends(),\n                    session=Depends(db_session),\n            ):\n\n                new_inserted_data = crud_service.insert_one(insert_args=insert_args.__dict__)\n\n                execute_service.add(session, new_inserted_data)\n                try:\n                    execute_service.flush(session)\n                except IntegrityError as e:\n                    err_msg, = e.orig.args\n                    if 'unique constraint' not in err_msg.lower():\n                        raise e\n                    result = Response(status_code=HTTPStatus.CONFLICT)\n                    return result\n\n                return result_parser.post_redirect_get(response_model=response_model,\n                                                       sql_execute_result=new_inserted_data,\n                                                       fastapi_request=request,\n                                                       session=session)",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "LuisLuii/FastAPIQuickCRUD",
    "source_file": "src/fastapi_quickcrud/misc/abstract_route.py",
    "complexity_score": 31
  },
  {
    "instruction": "Create a FastAPI PATCH endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "            @api.patch(path,\n                       status_code=200,\n                       response_model=Union[response_model],\n                       dependencies=dependencies)\n            def partial_update_one_by_primary_key(\n                    response: Response,\n                    primary_key: request_url_param_model = Depends(),\n                    patch_data: request_body_model = Depends(),\n                    extra_query: request_query_model = Depends(),\n                    session=Depends(db_session),\n            ):\n                filter_stmt = crud_service.model_query(filter_args=primary_key.__dict__,\n                                                       extra_args=extra_query.__dict__,\n                                                       session=session)\n\n                update_instance = session.execute(filter_stmt).scalar()\n\n                try:\n                    return result_parser.update(response_model=response_model,\n                                                sql_execute_result=update_instance,\n                                                update_args=patch_data.__dict__,\n                                                fastapi_response=response,\n                                                session=session,\n                                                update_one=True)\n                except IntegrityError as e:\n                    err_msg, = e.orig.args\n                    if 'unique constraint' not in err_msg.lower():\n                        raise e\n                    result = Response(status_code=HTTPStatus.CONFLICT)\n                    return result",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "patch",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "LuisLuii/FastAPIQuickCRUD",
    "source_file": "src/fastapi_quickcrud/misc/abstract_route.py",
    "complexity_score": 38
  },
  {
    "instruction": "Create a FastAPI PATCH endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "            @api.patch(path,\n                       status_code=200,\n                       response_model=response_model,\n                       dependencies=dependencies)\n            def partial_update_many_by_query(\n                    response: Response,\n                    patch_data: request_body_model = Depends(),\n                    extra_query: request_query_model = Depends(),\n                    session=Depends(db_session)\n            ):\n                filter_stmt = crud_service.model_query(filter_args=extra_query.__dict__,\n                                                       session=session)\n\n                data_instance = [i for i in session.execute(filter_stmt).scalars()]\n\n                if not data_instance:\n                    return Response(status_code=HTTPStatus.NO_CONTENT)\n                try:\n                    return result_parser.update(response_model=response_model,\n                                                sql_execute_result=data_instance,\n                                                fastapi_response=response,\n                                                update_args=patch_data.__dict__,\n                                                session=session,\n                                                update_one=False)\n                except IntegrityError as e:\n                    err_msg, = e.orig.args\n                    if 'unique constraint' not in err_msg.lower():\n                        raise e\n                    result = Response(status_code=HTTPStatus.CONFLICT)\n                    return result",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "patch",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "LuisLuii/FastAPIQuickCRUD",
    "source_file": "src/fastapi_quickcrud/misc/abstract_route.py",
    "complexity_score": 38
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "            @api.put(path, status_code=200, response_model=response_model, dependencies=dependencies)\n            def entire_update_by_primary_key(\n                    response: Response,\n                    primary_key: request_url_param_model = Depends(),\n                    update_data: request_body_model = Depends(),\n                    extra_query: request_query_model = Depends(),\n                    session=Depends(db_session),\n            ):\n                filter_stmt = crud_service.model_query(filter_args=primary_key.__dict__,\n                                                       extra_args=extra_query.__dict__,\n                                                       session=session)\n\n                data_instance = session.execute(filter_stmt).scalar()\n\n                if not data_instance:\n                    return Response(status_code=HTTPStatus.NOT_FOUND)\n                try:\n                    return result_parser.update(response_model=response_model,\n                                                sql_execute_result=data_instance,\n                                                fastapi_response=response,\n                                                update_args=update_data.__dict__,\n                                                session=session,\n                                                update_one=True)\n                except IntegrityError as e:\n                    err_msg, = e.orig.args\n                    if 'unique constraint' not in err_msg.lower():\n                        raise e\n                    result = Response(status_code=HTTPStatus.CONFLICT)\n                    return result",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "put",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "LuisLuii/FastAPIQuickCRUD",
    "source_file": "src/fastapi_quickcrud/misc/abstract_route.py",
    "complexity_score": 37
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "            @api.put(path, status_code=200, response_model=response_model, dependencies=dependencies)\n            def entire_update_many_by_query(\n                    response: Response,\n                    update_data: request_body_model = Depends(),\n                    extra_query: request_query_model = Depends(),\n                    session=Depends(db_session),\n            ):\n\n                filter_stmt = crud_service.model_query(filter_args=extra_query.__dict__,\n                                                       session=session)\n\n                data_instance = [i for i in session.execute(filter_stmt).scalars()]\n\n                if not data_instance:\n                    return Response(status_code=HTTPStatus.NO_CONTENT)\n                try:\n                    return result_parser.update(response_model=response_model,\n                                                sql_execute_result=data_instance,\n                                                fastapi_response=response,\n                                                update_args=update_data.__dict__,\n                                                session=session,\n                                                update_one=False)\n                except IntegrityError as e:\n                    err_msg, = e.orig.args\n                    if 'unique constraint' not in err_msg.lower():\n                        raise e\n                    result = Response(status_code=HTTPStatus.CONFLICT)\n                    return result",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "put",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "LuisLuii/FastAPIQuickCRUD",
    "source_file": "src/fastapi_quickcrud/misc/abstract_route.py",
    "complexity_score": 36
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "            @api.get(path, dependencies=dependencies, response_model=response_model, name=function_name)\n            def get_one_with_foreign_tree(response: Response,\n                                          request: Request,\n                                          url_param=Depends(request_url_param_model),\n                                          query=Depends(request_query_model),\n                                          session=Depends(\n                                              db_session)\n                                          ):\n                target_model = request.url.path.split(\"/\")[-2]\n                join = query.__dict__.pop('join_foreign_table', None)\n\n                stmt = query_service.get_one_with_foreign_pk(query=query.__dict__,\n                                                             join_mode=join,\n                                                             abstract_param=url_param.__dict__,\n                                                             target_model=target_model)\n                query_result = execute_service.execute(session, stmt)\n                parsed_response = parsing_service.find_one(response_model=response_model,\n                                                           sql_execute_result=query_result,\n                                                           fastapi_response=response,\n                                                           join_mode=join,\n                                                           session=session)\n                return parsed_response",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "LuisLuii/FastAPIQuickCRUD",
    "source_file": "src/fastapi_quickcrud/misc/abstract_route.py",
    "complexity_score": 25
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "            @api.get(path, dependencies=dependencies, response_model=response_model, name=function_name)\n            def get_many_with_foreign_tree(response: Response,\n                                           request: Request,\n                                           url_param=Depends(request_url_param_model),\n                                           query=Depends(request_query_model),\n                                           session=Depends(\n                                               db_session)\n                                           ):\n                target_model = request.url.path.split(\"/\")[-1]\n                join = query.__dict__.pop('join_foreign_table', None)\n                stmt = query_service.get_many(query=query.__dict__, join_mode=join, abstract_param=url_param.__dict__,\n                                              target_model=target_model)\n                query_result = execute_service.execute(session, stmt)\n                parsed_response = parsing_service.find_many(response_model=response_model,\n                                                            sql_execute_result=query_result,\n                                                            fastapi_response=response,\n                                                            join_mode=join,\n                                                            session=session)\n\n                return parsed_response",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "LuisLuii/FastAPIQuickCRUD",
    "source_file": "src/fastapi_quickcrud/misc/abstract_route.py",
    "complexity_score": 23
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "            @api.post(path, status_code=201, response_model=response_model, dependencies=dependencies)\n            def insert_one_and_support_upsert(\n                    response: Response,\n                    request: Request,\n                    query: request_body_model = Depends(request_body_model),\n                    session=Depends(db_session)\n            ):\n\n                stmt = query_service.upsert(insert_arg=query.__dict__,\n                                            unique_fields=unique_list)\n                try:\n                    query_result = execute_service.execute(session, stmt)\n                except IntegrityError as e:\n                    err_msg, = e.orig.args\n                    if 'unique constraint' not in err_msg.lower():\n                        raise e\n                    result = Response(status_code=HTTPStatus.CONFLICT, content=err_msg)\n                    return result\n                return parsing_service.upsert_one(response_model=response_model,\n                                                  sql_execute_result=query_result,\n                                                  fastapi_response=response,\n                                                  session=session)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "LuisLuii/FastAPIQuickCRUD",
    "source_file": "src/fastapi_quickcrud/misc/abstract_route.py",
    "complexity_score": 30
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "            @api.post(path, status_code=201, response_model=response_model, dependencies=dependencies)\n            def insert_many_and_support_upsert(\n                    response: Response,\n                    request: Request,\n                    query: request_body_model = Depends(request_body_model),\n                    session=Depends(db_session)\n            ):\n                stmt = query_service.upsert(insert_arg=query.__dict__,\n                                            unique_fields=unique_list,\n                                            upsert_one=False)\n                try:\n                    query_result = execute_service.execute(session, stmt)\n                except IntegrityError as e:\n                    err_msg, = e.orig.args\n                    if 'unique constraint' not in err_msg.lower():\n                        raise e\n                    result = Response(status_code=HTTPStatus.CONFLICT, content=err_msg)\n                    return result\n                return parsing_service.upsert_many(response_model=response_model,\n                                                   sql_execute_result=query_result,\n                                                   fastapi_response=response,\n                                                   session=session)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "LuisLuii/FastAPIQuickCRUD",
    "source_file": "src/fastapi_quickcrud/misc/abstract_route.py",
    "complexity_score": 30
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "            @api.post(path, status_code=201, response_model=response_model, dependencies=dependencies)\n            def insert_one_and_support_upsert(\n                    response: Response,\n                    request: Request,\n                    query: request_body_model = Depends(request_body_model),\n                    session=Depends(db_session)\n            ):\n\n                stmt = query_service.upsert(insert_arg=query.__dict__,\n                                            unique_fields=unique_list)\n                try:\n                    query_result = execute_service.execute(session, stmt)\n                except IntegrityError as e:\n                    err_msg, = e.orig.args\n                    if 'unique constraint' not in err_msg.lower():\n                        raise e\n                    result = Response(status_code=HTTPStatus.CONFLICT)\n                    return result\n                return parsing_service.upsert_one(response_model=response_model,\n                                                  sql_execute_result=query_result,\n                                                  fastapi_response=response,\n                                                  session=session)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "LuisLuii/FastAPIQuickCRUD",
    "source_file": "src/fastapi_quickcrud/misc/abstract_route.py",
    "complexity_score": 30
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "            @api.post(path, status_code=201, response_model=response_model, dependencies=dependencies)\n            def insert_many_and_support_upsert(\n                    response: Response,\n                    request: Request,\n                    query: request_body_model = Depends(request_body_model),\n                    session=Depends(db_session)\n            ):\n\n                stmt = query_service.upsert(insert_arg=query.__dict__,\n                                            unique_fields=unique_list,\n                                            upsert_one=False)\n                try:\n                    query_result = execute_service.execute(session, stmt)\n                except IntegrityError as e:\n                    err_msg, = e.orig.args\n                    if 'unique constraint' not in err_msg.lower():\n                        raise e\n                    result = Response(status_code=HTTPStatus.CONFLICT)\n                    return result\n                return parsing_service.upsert_many(response_model=response_model,\n                                                   sql_execute_result=query_result,\n                                                   fastapi_response=response,\n                                                   session=session)",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "LuisLuii/FastAPIQuickCRUD",
    "source_file": "src/fastapi_quickcrud/misc/abstract_route.py",
    "complexity_score": 31
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\n    \"/people\",\n    response_model=PeopleRead,\n    description=\"List all the available persons\",\n    tags=[\"people\"]\n)\ndef _list_people():\n    # TODO Filters\n    return PeopleRepository.list()",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "David-Lor/FastAPI-Pydantic-Mongo_Sample_CRUD_API",
    "source_file": "people_api/app.py",
    "complexity_score": 9
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\n    \"/people/{person_id}\",\n    response_model=PersonRead,\n    description=\"Get a single person by its unique ID\",\n    responses=get_exception_responses(PersonNotFoundException),\n    tags=[\"people\"]\n)\ndef _get_person(person_id: str):\n    return PeopleRepository.get(person_id)",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "David-Lor/FastAPI-Pydantic-Mongo_Sample_CRUD_API",
    "source_file": "people_api/app.py",
    "complexity_score": 11
  },
  {
    "instruction": "Create a FastAPI POST endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.post(\n    \"/people\",\n    description=\"Create a new person\",\n    response_model=PersonRead,\n    status_code=statuscode.HTTP_201_CREATED,\n    responses=get_exception_responses(PersonAlreadyExistsException),\n    tags=[\"people\"]\n)\ndef _create_person(create: PersonCreate):\n    return PeopleRepository.create(create)",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post"
    ],
    "source_repo": "David-Lor/FastAPI-Pydantic-Mongo_Sample_CRUD_API",
    "source_file": "people_api/app.py",
    "complexity_score": 12
  },
  {
    "instruction": "Create a FastAPI PATCH endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.patch(\n    \"/people/{person_id}\",\n    description=\"Update a single person by its unique ID, providing the fields to update\",\n    status_code=statuscode.HTTP_204_NO_CONTENT,\n    responses=get_exception_responses(PersonNotFoundException, PersonAlreadyExistsException),\n    tags=[\"people\"]\n)\ndef _update_person(person_id: str, update: PersonUpdate):\n    PeopleRepository.update(person_id, update)",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "patch",
      "database"
    ],
    "source_repo": "David-Lor/FastAPI-Pydantic-Mongo_Sample_CRUD_API",
    "source_file": "people_api/app.py",
    "complexity_score": 11
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.delete(\n    \"/people/{person_id}\",\n    description=\"Delete a single person by its unique ID\",\n    status_code=statuscode.HTTP_204_NO_CONTENT,\n    responses=get_exception_responses(PersonNotFoundException),\n    tags=[\"people\"]\n)\ndef _delete_person(person_id: str):\n    PeopleRepository.delete(person_id)",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "delete",
      "database"
    ],
    "source_repo": "David-Lor/FastAPI-Pydantic-Mongo_Sample_CRUD_API",
    "source_file": "people_api/app.py",
    "complexity_score": 11
  },
  {
    "instruction": "Create a FastAPI POST endpoint with database integration",
    "input": "Include database operations",
    "output": "@router.post(\"/\", response_description=\"Create a new book\", status_code=status.HTTP_201_CREATED, response_model=Book)\ndef create_book(request: Request, book: Book = Body(...)):\n    book = jsonable_encoder(book)\n    new_book = request.app.database[\"books\"].insert_one(book)\n    created_book = request.app.database[\"books\"].find_one(\n        {\"_id\": new_book.inserted_id}\n    )\n\n    return created_book",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post",
      "database"
    ],
    "source_repo": "mongodb-developer/pymongo-fastapi-crud",
    "source_file": "routes.py",
    "complexity_score": 9
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "@router.get(\"/\", response_description=\"List all books\", response_model=List[Book])\ndef list_books(request: Request):\n    books = list(request.app.database[\"books\"].find(limit=100))\n    return books",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "mongodb-developer/pymongo-fastapi-crud",
    "source_file": "routes.py",
    "complexity_score": 4
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "@router.get(\"/{id}\", response_description=\"Get a single book by id\", response_model=Book)\ndef find_book(id: str, request: Request):\n    if (book := request.app.database[\"books\"].find_one({\"_id\": id})) is not None:\n        return book\n\n    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Book with ID {id} not found\")",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "mongodb-developer/pymongo-fastapi-crud",
    "source_file": "routes.py",
    "complexity_score": 8
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with database integration",
    "input": "Include database operations",
    "output": "@router.put(\"/{id}\", response_description=\"Update a book\", response_model=Book)\ndef update_book(id: str, request: Request, book: BookUpdate = Body(...)):\n    book = {k: v for k, v in book.dict().items() if v is not None}\n\n    if len(book) >= 1:\n        update_result = request.app.database[\"books\"].update_one(\n            {\"_id\": id}, {\"$set\": book}\n        )\n\n        if update_result.modified_count == 0:\n            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Book with ID {id} not found\")\n\n    if (\n        existing_book := request.app.database[\"books\"].find_one({\"_id\": id})\n    ) is not None:\n        return existing_book\n\n    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Book with ID {id} not found\")",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "put",
      "database"
    ],
    "source_repo": "mongodb-developer/pymongo-fastapi-crud",
    "source_file": "routes.py",
    "complexity_score": 20
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with database integration",
    "input": "Include database operations",
    "output": "@router.delete(\"/{id}\", response_description=\"Delete a book\")\ndef delete_book(id: str, request: Request, response: Response):\n    delete_result = request.app.database[\"books\"].delete_one({\"_id\": id})\n\n    if delete_result.deleted_count == 1:\n        response.status_code = status.HTTP_204_NO_CONTENT\n        return response\n\n    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Book with ID {id} not found\")",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "delete",
      "database"
    ],
    "source_repo": "mongodb-developer/pymongo-fastapi-crud",
    "source_file": "routes.py",
    "complexity_score": 11
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post(\"/login\", response_model=Token)\ndef login_for_access_token(\n    db: Session = Depends(get_db), form_data: OAuth2PasswordRequestForm = Depends()\n) -> Dict[str, Any]:\n    \"\"\"\n    Endpoint for user login. Authenticates the user using the provided\n    email and password.\n\n    Parameters:\n        - db (Session): The database session.\n        - form_data (OAuth2PasswordRequestForm): The form data\n        containing the username and password.\n\n    Returns:\n        - Dict[str, Any]: A dictionary containing the access token and token type.\n    \"\"\"\n    user = user_crud.authenticate_user(\n        db, email=form_data.username, password=form_data.password\n    )\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Incorrect email or password\",\n        )\n    if not user_crud.is_active_user(user):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST, detail=\"Inactive user\"\n        )\n\n    access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = security.create_access_token(\n        subject=user.id, expires_delta=access_token_expires\n    )\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/auth.py",
    "complexity_score": 42
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post(\"/register\", response_model=dict, status_code=status.HTTP_201_CREATED)\ndef register(user_register: UserRegister, db: Session = Depends(get_db)):\n    user = user_crud.get_user_by_email(db, email=user_register.email)\n    if user:\n        raise HTTPException(\n            status_code=status.HTTP_409_CONFLICT,\n            detail=f\"The user with this {user_register.email} already exists in the system\",\n        )\n\n    user_in = UserInDB(\n        **user_register.model_dump(exclude_unset=True, exclude_defaults=True),\n        hashed_password=security.get_password_hash(user_register.password),\n    )\n\n    user_crud.create(db, user_in)\n    return {\"message\": \"User created successfully\"}",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/auth.py",
    "complexity_score": 24
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/all\",\n    response_model=List[Optional[BodyPartInDB]],\n    status_code=status.HTTP_200_OK,\n)\ndef fetch_body_parts(\n    db: Session = Depends(get_db),\n    pagination_params: dict = Depends(get_pagination_params),\n):\n    \"\"\"\n    Fetches the body parts from the database based on pagination parameters.\n\n    Parameters:\n        db (Session): The database session.\n        pagination_params (dict): The pagination parameters.\n\n    Returns:\n        BodyPartsInDB: The fetched body parts from the database.\n    \"\"\"\n    skip, limit = pagination_params\n    return bodypart_crud.get_many(db, skip=skip, limit=limit)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/body_part.py",
    "complexity_score": 27
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/{body_part_id}\",\n    status_code=status.HTTP_200_OK,\n    response_model=Optional[BodyPartInDB],\n)\ndef fetch_body_part_by_id(body_part_id: int, db: Session = Depends(get_db)):\n    \"\"\"\n    Fetches a body part by its ID.\n\n    Parameters:\n        body_part_id (int): The ID of the body part to fetch.\n        db (Session, optional): The database session. Defaults to Depends(get_db).\n\n    Returns:\n        body_part: The fetched body part.\n\n    Raises:\n        HTTPException: If the body part with the given ID is not found.\n    \"\"\"\n    body_part = bodypart_crud.get_one(db, BodyPart.id == body_part_id)\n\n    if body_part is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Body part with id {body_part_id} not found\",\n        )\n\n    return body_part",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/body_part.py",
    "complexity_score": 36
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/name/{body_part_name}\",\n    response_model=Optional[BodyPartInDB],\n    status_code=status.HTTP_200_OK,\n)\ndef fetch_body_part_by_name(body_part_name: str, db: Session = Depends(get_db)):\n    \"\"\"\n    Fetches a body part from the database by its name.\n\n    Parameters:\n        body_part_name (str): The name of the body part.\n        db (Session): The database session.\n\n    Returns:\n        BodyPartInDB: The body part fetched from the database.\n\n    Raises:\n        HTTPException: If the body part with the\n        specified name is not found in the database.\n    \"\"\"\n    body_part = bodypart_crud.get_one(db, BodyPart.name == body_part_name)\n    if body_part is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Body part with name {body_part_name} not found\",\n        )\n    return body_part",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/body_part.py",
    "complexity_score": 35
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post(\"/\", response_model=BodyPartInDB, status_code=status.HTTP_201_CREATED)\ndef create_body_part(\n    body_part: BodyPartCreate,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_superuser),\n) -> BodyPartInDB:\n    \"\"\"\n    Creates a new body part in the database.\n\n    Parameters:\n        body_part: The data of the body part to be created.\n        db: The database session.\n        user: The current superuser.\n\n    Returns:\n        The created body part.\n    \"\"\"\n    try:\n        return bodypart_crud.create(db, obj_create=body_part)\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_409_CONFLICT,\n            detail=f\"Body part with name {body_part.name} already exists\",\n        ) from e",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/body_part.py",
    "complexity_score": 37
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.delete(\n    \"/{body_part_id}\", status_code=status.HTTP_200_OK, response_model=Dict[str, str]\n)\ndef delete_body_part(\n    body_part_id: int,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_superuser),\n):\n    \"\"\"\n    Delete a body part by its ID.\n\n    Parameters:\n        body_part_id (int): The ID of the body part to be deleted.\n        db (Session): The database session.\n        user (User): The current superuser.\n\n    Raises:\n        HTTPException: If the body part with the given ID is\n        not found or the user does not have permission to delete it.\n        HTTPException: If there is an error while deleting the body part.\n\n    Returns:\n        dict: A dictionary with a detail message indicating\n        that the body part was deleted.\n    \"\"\"\n    body_part = bodypart_crud.get_one(db, BodyPart.id == body_part_id)\n    if body_part is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Body part with id {body_part_id} not found. Cannot delete.\",\n        )\n    try:\n        bodypart_crud.delete(db, body_part)\n    except Exception as e:  # pragma: no cover\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Couldn't delete body part with id {body_part_id}. Error: {str(e)}\",\n        ) from e  # pragma: no cover\n    return {\"detail\": f\"Body part with id {body_part_id} deleted.\"}",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/body_part.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.put(\n    \"/{body_part_id}\",\n    response_model=BodyPartInDB,\n    status_code=status.HTTP_200_OK,\n)\ndef update_body_part(\n    body_part_id: int,\n    body_part_update: BodyPartUpdate,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_superuser),\n):\n    \"\"\"\n    Update a body part in the database.\n\n    Parameters:\n        body_part_id (int): The ID of the body part to update.\n        body_part_update (BodyPartUpdate): The updated body part data.\n        db (Session): The database session.\n        user (User): The current superuser.\n\n    Raises:\n        HTTPException: If the body part with the given ID is not\n        found or if the user does not have permission to update the body part.\n        HTTPException: If there is an error updating the body part.\n\n    Returns:\n        BodyPartInDB: The updated body part.\n    \"\"\"\n    body_part = bodypart_crud.get_one(db, BodyPart.id == body_part_id)\n    if body_part is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Body part with id {body_part_id} not found. Cannot update.\",\n        )\n\n    try:\n        body_part = bodypart_crud.update(db, body_part, body_part_update)\n    except Exception as e:  # pragma: no cover\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Couldn't update body part with id {body_part_id}. Error: {str(e)}\",\n        ) from e  # pragma: no cover\n    return body_part",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "put",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/body_part.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/all\", response_model=List[Optional[ExerciseInDB]], status_code=status.HTTP_200_OK\n)\ndef fetch_all_exercises(\n    db: Session = Depends(get_db),\n    pagination_params: Tuple[int, int] = Depends(get_pagination_params),\n) -> List[Optional[ExerciseInDB]]:\n    \"\"\"\n    Fetch all exercises.\n\n    This function fetches all exercises from the\n    database based on the pagination parameters.\n\n    Parameters:\n        db (Session): The database session.\n        pagination_params (Tuple[int, int]): The pagination parameters (skip, limit).\n\n    Returns:\n        ExercisesInDB: The list of exercises fetched from the database.\n    \"\"\"\n    skip, limit = pagination_params\n    return exercise_crud.get_many(db, skip=skip, limit=limit)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/exercise.py",
    "complexity_score": 28
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/my\", response_model=List[Optional[ExerciseInDB]], status_code=status.HTTP_200_OK\n)\ndef fetch_all_exercises_for_owner(\n    db: Session = Depends(get_db),\n    pagination_params: Tuple[int, int] = Depends(get_pagination_params),\n    user: User = Depends(get_current_active_user),\n) -> List[Optional[ExerciseInDB]]:\n    \"\"\"\n    Fetches all exercises for user\n\n    Parameters:\n        db (Session): The database session.\n        pagination_params (Tuple[int, int]): The pagination parameters (skip, limit).\n        user (User): The current active user.\n\n    Returns:\n        ExercisesInDB: The exercises fetched for the owner.\n    \"\"\"\n    skip, limit = pagination_params\n    return exercise_crud.get_many_for_owner(\n        db, skip=skip, limit=limit, owner_id=user.id\n    )",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/exercise.py",
    "complexity_score": 29
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/{exercise_id}\",\n    response_model=Optional[ExerciseInDB],\n    status_code=status.HTTP_200_OK,\n)\ndef fetch_exercise_by_id(\n    exercise_id: int, db: Session = Depends(get_db)\n) -> ExerciseInDB:\n    \"\"\"\n    Fetches an exercise by its ID.\n\n    Parameters:\n        exercise_id (int): The ID of the exercise.\n        db (Session): The database session.\n\n    Returns:\n        ExerciseInDB: The fetched exercise.\n\n    Raises:\n        HTTPException: If the exercise is not found.\n    \"\"\"\n    exercise = exercise_crud.get_one(db, Exercise.id == exercise_id)\n    if exercise is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Exercise with id {exercise_id} not found\",\n        )\n    return exercise",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/exercise.py",
    "complexity_score": 36
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/name/{exercise_name}\",\n    response_model=ExerciseInDB,\n    status_code=status.HTTP_200_OK,\n)\ndef fetch_exercise_by_name(exercise_name: str, db: Session = Depends(get_db)):\n    \"\"\"\n    Fetches an exercise by its name from the database.\n\n    Parameters:\n        exercise_name (str): The name of the exercise.\n        db (Session, optional): The database session. Defaults to Depends(get_db).\n\n    Returns:\n        ExerciseInDB: The exercise retrieved from the database.\n\n    Raises:\n        HTTPException: If the exercise with the given name is not found in the database.\n    \"\"\"\n    exercise = exercise_crud.get_one(db, Exercise.name == exercise_name)\n    if exercise is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Exercise with name {exercise_name} not found\",\n        )\n    return exercise",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/exercise.py",
    "complexity_score": 34
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post(\n    \"/\",\n    response_model=ExerciseInDB,\n    status_code=status.HTTP_201_CREATED,\n    response_model_exclude_none=True,\n    response_model_exclude_unset=True,\n)\ndef create_exercise(\n    exercise_create: Annotated[\n        ExerciseCreate,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Bench Press with closed eyes\",\n                    \"target_body_part_id\": 1,\n                    \"exercise_type_id\": 1,\n                    \"level_id\": 1,\n                    \"description\": \"description\",\n                }\n            ]\n        ),\n    ],\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Create an exercise.\n\n    Parameters:\n        exercise_create (ExerciseCreate): The exercise data to be created.\n        db (Session, optional): The database session.\n            Defaults to Depends(get_db).\n        user (User, optional): The current active user.\n\n\n    Returns:\n        ExerciseInDB: The created exercise.\n\n    \"\"\"\n    try:\n        exercise = exercise_crud.create_with_owner(\n            db, exercise_create, owner_id=user.id\n        )\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_409_CONFLICT,\n            detail=f\"Exercise with name {exercise_create.name} already exists\",\n        ) from e\n    return exercise",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/exercise.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.put(\n    \"/{exercise_id}\",\n    response_model=ExerciseInDB,\n    status_code=status.HTTP_200_OK,\n)\ndef update_exercise(\n    exercise_id: int,\n    exercise_update: ExerciseUpdate,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Update an exercise by its ID.\n\n    Parameters:\n        exercise_id (int): The ID of the exercise to be updated.\n        exercise_update (ExerciseUpdate): The updated exercise data.\n        db (Session, optional): The database session.\n            Defaults to Depends(get_db).\n        user (User, optional): The current authenticated user.\n\n\n    Returns:\n        ExerciseInDB: The updated exercise.\n\n    Raises:\n        HTTPException: If the exercise does not exist or\n            the user does not have enough permissions.\n        HTTPException: If there is an error updating\n            the exercise in the database.\n    \"\"\"\n    exercise = exercise_crud.get_one(db, Exercise.id == exercise_id)\n    if exercise is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Exercise with id {exercise_id} not found\",\n        )\n\n    if exercise.owner_id != user.id or not user.is_superuser:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Not enough permissions to update exercise\",\n        )\n\n    try:\n        exercise = exercise_crud.update(db, exercise, exercise_update)\n    except Exception as e:  # pragma: no cover\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Couldn't update exercise with id {exercise_id}. Error: {str(e)}\",\n        ) from e  # pragma: no cover\n    return exercise",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "put",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/exercise.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.delete(\"/{exercise_id}\", response_model=dict, status_code=status.HTTP_200_OK)\ndef delete_exercise(\n    exercise_id: int,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Deletes an exercise by its ID.\n\n    Parameters:\n        exercise_id (int): The ID of the exercise to delete.\n        db (Session): The database session.\n        user (User): The current user.\n\n    Returns:\n        dict: A dictionary containing the detail that\n            the exercise with the given ID was deleted.\n\n    Raises:\n        HTTPException: If the exercise with the given ID is not found.\n        HTTPException: If the user does not have enough\n            permissions to delete the exercise.\n        HTTPException: If there is an error while\n            deleting the exercise from the database.\n    \"\"\"\n    exercise = exercise_crud.get_one(db, Exercise.id == exercise_id)\n    if exercise is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Exercise with id {exercise_id} not found. Cannot delete.\",\n        )\n\n    if exercise.owner_id != user.id or not user.is_superuser:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Not enough permissions to delete exercise\",\n        )\n\n    try:\n        exercise_crud.delete(db, exercise)\n    except Exception as e:  # pragma: no cover\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Couldn't delete exercise with id {exercise_id}. Error: {str(e)}\",\n        ) from e  # pragma: no cover\n\n    return {\"detail\": f\"Exercise with id {exercise_id} deleted.\"}",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/exercise.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/all\",\n    response_model=List[Optional[ExerciseTypeInDB]],\n    status_code=status.HTTP_200_OK,\n)\ndef fetch_all_exercise_types(\n    db: Session = Depends(get_db), pagination_params=Depends(get_pagination_params)\n):\n    \"\"\"\n    Fetches all exercise types from the database.\n\n    Parameters:\n        db (Session): The database session.\n        pagination_params (Tuple[int, int]): The pagination args (skip, limit).\n\n    Returns:\n        List[ExerciseTypesInDB]: A list of exercise types from the database.\n    \"\"\"\n    skip, limit = pagination_params\n    return exercise_type_crud.get_many(db, skip=skip, limit=limit)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/exercise_type.py",
    "complexity_score": 26
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/{exercise_type_id}\",\n    response_model=Optional[ExerciseTypeInDB],\n    status_code=status.HTTP_200_OK,\n)\ndef fetch_exercise_type_by_id(exercise_type_id: int, db: Session = Depends(get_db)):\n    \"\"\"\n    Fetches an exercise type by its ID from the database.\n\n    Parameters:\n        exercise_type_id (int): The ID of the exercise type to fetch.\n        db (Session): The database session. Defaults to Depends(get_db).\n\n    Returns:\n        ExerciseTypeInDB: The fetched exercise type.\n\n    Raises:\n        HTTPException: If the exercise type with the given\n        ID is not found in the database.\n    \"\"\"\n    exercise_type = exercise_type_crud.get_one(db, ExerciseType.id == exercise_type_id)\n    if exercise_type is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Exercise type with id {exercise_type_id} not found\",\n        )\n    return exercise_type",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/exercise_type.py",
    "complexity_score": 35
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/name/{exercise_type_name}\",\n    response_model=Optional[ExerciseTypeInDB],\n    status_code=status.HTTP_200_OK,\n)\ndef fetch_exercise_type_by_name(exercise_type_name: str, db: Session = Depends(get_db)):\n    \"\"\"\n    Fetches an exercise type from the database by its name.\n\n    Parameters:\n        exercise_type_name (str): The name of the exercise type to fetch.\n        db (Session): The database session.\n\n    Returns:\n        ExerciseTypeInDB: The exercise type fetched from the database.\n\n    Raises:\n        HTTPException: If the exercise type with the given name is not found.\n    \"\"\"\n    exercise_type = exercise_type_crud.get_one(\n        db, ExerciseType.name == exercise_type_name\n    )\n    if exercise_type is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Exercise type with name {exercise_type_name} not found\",\n        )\n    return exercise_type",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/exercise_type.py",
    "complexity_score": 36
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post(\n    \"/\",\n    response_model=ExerciseTypeInDB,\n    status_code=status.HTTP_201_CREATED,\n)\ndef create_exercise_type(\n    exercise_type_create: ExerciseTypeCreate,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_superuser),\n):\n    \"\"\"\n    Creates a new exercise type.\n\n    Parameters:\n        exercise_type_create (ExerciseTypeCreate): The exercise type data to create.\n        db (Session): The database session. Defaults to Depends(get_db).\n        user (User): The current user.\n\n    Returns:\n        ExerciseTypeInDB: The newly created exercise type.\n    \"\"\"\n    try:\n        exercise_type = exercise_type_crud.create(db, exercise_type_create)\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_409_CONFLICT,\n            detail=f\"Exercise type with name {exercise_type_create.name} already exists\",\n        ) from e\n    return exercise_type",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/exercise_type.py",
    "complexity_score": 42
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.put(\n    \"/{exercise_type_id}\",\n    response_model=ExerciseTypeInDB,\n    status_code=status.HTTP_200_OK,\n)\ndef update_exercise_type(\n    exercise_type_id: int,\n    exercise_type_update: ExerciseTypeUpdate,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_superuser),\n):\n    \"\"\"\n    Update an exercise type in the database.\n\n    Parameters:\n        exercise_type_id (int): The ID of the exercise type to be updated.\n        exercise_type_update (ExerciseTypeUpdate): The updated exercise type data.\n        db (Session): The database session. Defaults to Depends(get_db).\n        user (User): The current user.\n\n    Returns:\n        ExerciseTypeInDB: The updated exercise type.\n\n    Raises:\n        HTTPException: If the exercise type with the specified ID\n        is not found or if there is an internal server error during the update process.\n    \"\"\"\n    exercise_type = exercise_type_crud.get_one(db, ExerciseType.id == exercise_type_id)\n    if exercise_type is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Exercise type with id {exercise_type_id} not found.\",\n        )\n\n    try:\n        exercise_type = exercise_type_crud.update(\n            db, exercise_type, exercise_type_update\n        )\n    except Exception as e:  # pragma no cover\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Couldn't update exercise type with id {exercise_type_id}. \\\n                Error: {str(e)}\",\n        ) from e  # pragma no cover\n    return exercise_type",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "put",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/exercise_type.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.delete(\n    \"/{exercise_type_id}\",\n    status_code=status.HTTP_200_OK,\n    response_model=Dict[str, str],\n)\ndef delete_exercise_type(\n    exercise_type_id: int,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_superuser),\n):\n    \"\"\"\n    Deletes an exercise type with the given exercise_type_id.\n\n    Parameters:\n        exercise_type_id (int): The ID of the exercise type to delete.\n        db (Session): The database session. Defaults to Depends(get_db).\n        user (User): The current user.\n\n    Returns:\n        dict: A dictionary with a detail message indicating whether the\n              exercise type was successfully deleted or not.\n    \"\"\"\n    exercise_type = exercise_type_crud.get_one(db, ExerciseType.id == exercise_type_id)\n    if exercise_type is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Exercise type with id {exercise_type_id} not found.\",\n        )\n    try:\n        exercise_type_crud.delete(db, exercise_type)\n    except Exception as e:  # pragma: no cover\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Couldn't delete exercise type with id {exercise_type_id}. \\\n                Error: {str(e)}\",\n        ) from e  # pragma: no cover\n    return {\"detail\": f\"Exercise type with id {exercise_type_id} deleted.\"}",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/exercise_type.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/all\", response_model=List[Optional[LevelInDB]], status_code=status.HTTP_200_OK\n)\ndef fetch_all_levels(\n    db: Session = Depends(get_db),\n    pagination_params: dict = Depends(get_pagination_params),\n):\n    \"\"\"\n    Fetches all levels from the database with pagination.\n\n    Parameters:\n        db (Session): The database session.\n        pagination_params (dict): The pagination parameters.\n            - skip (int): The number of records to skip.\n            - limit (int): The maximum number of records to fetch.\n\n    Returns:\n        results (List[Optional[LevelInDB]]): A list of level\n        objects fetched from the database.\n    \"\"\"\n    skip, limit = pagination_params\n    results = level_crud.get_many(db, skip=skip, limit=limit)\n    return results",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/level.py",
    "complexity_score": 29
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/{level_id}\", response_model=Optional[LevelInDB], status_code=status.HTTP_200_OK\n)\ndef fetch_level_by_id(level_id: int, db: Session = Depends(get_db)):\n    \"\"\"\n    Fetches a level by its ID.\n\n    Parameters:\n        level_id (int): The ID of the level to fetch.\n        db (Session): The database session.\n        Defaults to the result of the `get_db` function.\n\n    Returns:\n        Optional[LevelInDB]: The fetched level, or None if not found.\n    \"\"\"\n    level = level_crud.get_one(db, Level.id == level_id)\n    if level is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Level with id {level_id} not found\",\n        )\n    return level",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/level.py",
    "complexity_score": 30
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/name/{level_name}\",\n    response_model=Optional[LevelInDB],\n    status_code=status.HTTP_200_OK,\n)\ndef fetch_level_by_name(level_name: str, db: Session = Depends(get_db)):\n    \"\"\"\n    Fetches a level from the database by its name.\n\n    Parameters:\n        level_name (str): The name of the level to fetch.\n        db (Session): The database session.\n\n    Returns:\n        Optional[LevelInDB]: The fetched level, or None if it doesn't exist.\n    \"\"\"\n    level = level_crud.get_one(db, Level.name == level_name)\n    if level is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Level with name {level_name} not found\",\n        )\n    return level",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/level.py",
    "complexity_score": 31
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post(\n    \"/\", response_model=Optional[LevelInDB], status_code=status.HTTP_201_CREATED\n)\ndef create_level(\n    level_create: LevelCreate,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_superuser),\n):\n    \"\"\"Creates a new level in the database.\n\n    Parameters:\n        level_create (LevelCreate): The data required to create a new level.\n        db (Session): The database session.\n        user (User): The current superuser making the request.\n\n    Returns:\n        Optional[LevelInDB]: The newly created level if successful.\n\n    Raises:\n        HTTPException: If the user is not a superuser or if\n        there is an error creating the level.\n    \"\"\"\n    try:\n        return level_crud.create(db, obj_create=level_create)\n    except IntegrityError as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Couldn't create level. Level with name: {level_create.name} already exists\",\n        ) from e\n\n    except Exception as e:  # pragma: no cover\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Couldn't create level. Error: {str(e)}\",\n        ) from e  # pragma: no cover",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/level.py",
    "complexity_score": 48
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.delete(\"/{level_id}\", response_model=dict, status_code=status.HTTP_200_OK)\ndef delete_level(\n    level_id: int,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_superuser),\n):\n    \"\"\"\n    Deletes a level from the database.\n\n    Parameters:\n        level_id (int): The ID of the level to be deleted.\n        db (Session): The database session.\n            Defaults to Depends(get_db).\n        user (User): The current superuser.\n\n    Raises:\n        HTTPException: If the level with the specified ID is not found\n        or the user does not have enough privileges.\n        HTTPException: If there is an error while deleting the level.\n\n    Returns:\n        dict: A dictionary with the detail\n        message indicating that the level was deleted.\n    \"\"\"\n    level = level_crud.get_one(db, Level.id == level_id)\n    if level is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Level with id {level_id} not found. Cannot delete.\",\n        )\n    try:\n        level_crud.delete(db, level)\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Couldn't delete level with id {level_id}. Error: {str(e)}\",\n        ) from e\n    return {\"detail\": f\"level with id {level_id} deleted.\"}",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/level.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.put(\n    \"/{level_id}\",\n    response_model=Optional[LevelInDB],\n    status_code=status.HTTP_200_OK,\n)\ndef update_level(\n    level_id: int,\n    level_update: LevelUpdate,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_superuser),\n):\n    \"\"\"\n    Update a level in the database.\n\n    Parameters:\n        level_id (int): The ID of the level to be updated.\n        level_update (LevelUpdate): The updated level data.\n        db (Session): The database session.\n        user (User): The current user.\n\n    Returns:\n        Optional[LevelInDB]: The updated level, if successful.\n    \"\"\"\n    level = level_crud.get_one(db, Level.id == level_id)\n    if level is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Level with id {level_id} not found. Cannot update.\",\n        )\n    try:\n        level = level_crud.update(db, level, level_update)\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Couldn't update level with id {level_id}. Error: {str(e)}\",\n        ) from e\n    return level",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "put",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/level.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/all\",\n    response_model=List[Optional[TrainingPlanInDB]],\n    status_code=status.HTTP_200_OK,\n)\ndef get_all_training_plans(\n    db: Session = Depends(get_db),\n    pagination_params: dict = Depends(get_pagination_params),\n    user: User = Depends(get_current_superuser),\n):\n    \"\"\"\n    Retrieves all training plans with pagination.\n\n    Parameters:\n        db (Session): The database session.\n        pagination_params (dict): A dictionary containing the pagination parameters.\n\n    Returns:\n        List[Optional[TrainingPlanInDB]]: A list of\n        training plans retrieved from the database.\n    \"\"\"\n    skip, limit = pagination_params\n    return training_plan_crud.get_many(db, skip=skip, limit=limit)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_plan.py",
    "complexity_score": 29
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/all/my\",\n    response_model=List[Optional[TrainingPlanInDB]],\n    status_code=status.HTTP_200_OK,\n)\ndef get_all_training_plans_for_owner(\n    db: Session = Depends(get_db),\n    pagination_params: dict = Depends(get_pagination_params),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Retrieve all training plans for the owner.\n\n    Parameters:\n        db (Session): The database session.\n        pagination_params (dict): The pagination parameters.\n        user (User): The current active user.\n\n    Returns:\n        List[Optional[TrainingPlanInDB]]: A list of training plans owned by the user.\n    \"\"\"\n    skip, limit = pagination_params\n    return training_plan_crud.get_many_for_owner(\n        db, skip=skip, limit=limit, owner_id=user.id\n    )",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_plan.py",
    "complexity_score": 31
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/{training_plan_id}\",\n    response_model=Optional[TrainingPlanInDB],\n    status_code=status.HTTP_200_OK,\n)\ndef get_training_plan_by_id(\n    training_plan_id: int,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Retrieves a training plan from the database by its ID.\n\n    Parameters:\n        training_plan_id (int): The ID of the training plan to retrieve.\n        db (Session): The database session.\n\n    Returns:\n        Optional[TrainingPlanInDB]: The retrieved training plan, or None if not found.\n\n    Raises:\n        HTTPException: If the training plan with the specified ID is not found.\n\n    \"\"\"\n    if user.is_superuser:\n        training_plan = training_plan_crud.get_one(\n            db, TrainingPlan.id == training_plan_id\n        )\n    else:\n        training_plan = training_plan_crud.get_one(\n            db, TrainingPlan.id == training_plan_id, owner_id=user.id\n        )\n\n    if training_plan is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Training plan with id {training_plan_id} not found\",\n        )\n    return training_plan",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_plan.py",
    "complexity_score": 47
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/name/{training_plan_name}\",\n    response_model=Optional[TrainingPlanInDB],\n    status_code=status.HTTP_200_OK,\n)\ndef get_training_plan_by_name(\n    training_plan_name: str,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Get a training plan by its name.\n\n    Parameters:\n        training_plan_name (str): The name of the training plan.\n        db (Session): The database session.\n\n    Returns:\n        Optional[TrainingPlanInDB]: The training plan with the specified name,\n        if found. Otherwise, None.\n\n    Raises:\n        HTTPException: If the training plan with the specified name is not found.\n\n    \"\"\"\n\n    training_plan = training_plan_crud.get_one(\n        db, TrainingPlan.name == training_plan_name, owner_id=user.id\n    )\n    if training_plan is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Training plan with name {training_plan_name} not found\",\n        )\n    return training_plan",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_plan.py",
    "complexity_score": 43
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/name/{training_plan_name}/superuser\",\n    response_model=List[Optional[TrainingPlanInDB]],\n    status_code=status.HTTP_200_OK,\n    include_in_schema=False,\n)\ndef get_training_plans_by_name_for_super_user(\n    training_plan_name: str,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_superuser),\n):\n    \"\"\"\n    Get a training plan by name for a super user.\n\n    Parameters:\n        training_plan_name (str): The name of the training plan.\n        db (Session, optional): The database session. Defaults to Depends(get_db).\n        user (User, optional): The current superuser. Defaults to Depends(get_current_superuser).\n\n    Returns:\n        Optional[TrainingPlanInDB]: The training plan with the specified name, if found.\n\n\n    \"\"\"\n    training_plan = training_plan_crud.get_many(\n        db, TrainingPlan.name == training_plan_name\n    )\n    return training_plan",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_plan.py",
    "complexity_score": 34
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post(\n    \"/\", response_model=Optional[TrainingPlanInDB], status_code=status.HTTP_201_CREATED\n)\ndef create_training_plan(\n    training_plan_create: TrainingPlanCreate,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Create a new training plan with the specified data.\n\n    Parameters:\n        training_plan_create (TrainingPlanCreate):\n            The data for creating the training plan.\n        db (Session, optional): The database session.\n            Defaults to Depends(get_db).\n        user (User, optional): The current authenticated user.\n\n    Returns:\n        Optional[TrainingPlanInDB]: The created training plan.\n\n    Raises:\n        HTTPException: If there is an error creating the training plan.\n    \"\"\"\n    training_plan = training_plan_crud.get_one(\n        db, TrainingPlan.name == training_plan_create.name, owner_id=user.id\n    )\n    if training_plan is not None:\n        raise HTTPException(\n            status_code=status.HTTP_409_CONFLICT,\n            detail=f\"Training plan with name {training_plan_create.name} already exists\",\n        )\n    return training_plan_crud.create_with_owner(\n        db, obj_create=training_plan_create, owner_id=user.id\n    )",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_plan.py",
    "complexity_score": 43
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.delete(\n    \"/{training_plan_id}\", response_model=dict, status_code=status.HTTP_200_OK\n)\ndef delete_training_plan(\n    training_plan_id: int,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Deletes a training plan with the given `training_plan_id`.\n\n    Parameters:\n        training_plan_id (int): The ID of the training plan to be deleted.\n        db (Session, optional): The database session.\n        user (User, optional): The current active user.\n\n    Raises:\n        HTTPException: If the training plan is not found\n            or the user does not have enough privileges.\n        Exception: If there is an error while deleting the training plan.\n\n    Returns:\n        None\n    \"\"\"\n    training_plan: TrainingPlan = training_plan_crud.get_one(\n        db, TrainingPlan.id == training_plan_id\n    )\n    if training_plan is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Training plan with id {training_plan_id} not found. \\\n            Cannot delete.\",\n        )\n    if training_plan.owner_id != user.id and not user.is_superuser:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"The user does not have enough privileges\",\n        )\n    try:\n        training_plan_crud.delete(db, training_plan)\n    except Exception as e:  # pragma: no cover\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e),\n        ) from e  # pragma: no cover\n    return {\"detail\": \"Training plan with id {training_plan_id} deleted\"}",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_plan.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.put(\n    \"/{training_plan_id}\",\n    response_model=Optional[TrainingPlanInDB],\n    status_code=status.HTTP_200_OK,\n)\ndef update_training_plan(\n    training_plan_id: int,\n    training_plan_update: TrainingPlanUpdate,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Update a training plan with the given ID.\n\n    Parameters:\n        training_plan_id (int): The ID of the training plan to update.\n        training_plan_update (TrainingPlanUpdate): The updated training plan data.\n        db (Session, optional): The database session. Defaults to Depends(get_db).\n        user (User, optional): The current user.\n\n    Returns:\n        Optional[TrainingPlanInDB]: The updated training plan.\n\n    Raises:\n        HTTPException 404: If the training plan with the given ID is not found.\n        HTTPException 403: If the user does not have sufficient privileges.\n    \"\"\"\n    training_plan: TrainingPlan = training_plan_crud.get_one(\n        db, TrainingPlan.id == training_plan_id\n    )\n    if training_plan is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Training plan with id {training_plan_id} not found. \\\n            Cannot update.\",\n        )\n    if training_plan.owner_id != user.id and not user.is_superuser:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"The user does not have enough privileges\",\n        )\n    return training_plan_crud.update(\n        db, db_obj=training_plan, obj_update=training_plan_update\n    )",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "put",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_plan.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.put(\n    \"/{training_plan_id}/training-units/{training_unit_id}/add\",\n    response_model=Optional[TrainingPlanInDB],\n    status_code=status.HTTP_200_OK,\n)\ndef add_training_unit_to_training_plan(\n    training_plan_id: int,\n    training_unit_id: int,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Add a training unit to a training plan.\n\n    Parameters:\n        training_plan_id (int): The ID of the training plan to add the training unit to.\n        training_unit_id (int): The ID of the training unit to add to the training plan.\n        db (Session, optional): The database session. Defaults to Depends(get_db).\n        user (User, optional): The current user.\n\n    Returns:\n        None\n\n    Raises:\n        HTTPException 404: If the training plan or\n            training unit with the given IDs are not found.\n        HTTPException 403: If the user does not have sufficient privileges.\n    \"\"\"\n    training_plan: TrainingPlan = training_plan_crud.get_one(\n        db, TrainingPlan.id == training_plan_id\n    )\n    if training_plan is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Training plan with id {training_plan_id} not found. \\\n            Cannot update.\",\n        )\n    training_unit = training_unit_crud.get_one(db, TrainingUnit.id == training_unit_id)\n    if training_unit is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Training unit with id {training_unit_id} not found. \\\n            Cannot update.\",\n        )\n    if training_plan.owner_id != user.id and not user.is_superuser:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"The user does not have enough privileges\",\n        )\n    training_plan = training_plan_crud.add_training_unit_to_training_plan(\n        db, training_plan=training_plan, training_unit=training_unit\n    )\n    if training_plan is None:\n        raise HTTPException(\n            status_code=status.HTTP_409_CONFLICT,\n            detail=f\"Training unit with id {training_unit_id} already exists in training plan with id {training_plan_id}\",\n        )\n    return training_plan",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "put",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_plan.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.put(\n    \"/{training_plan_id}/training-units/{training_unit_id}/remove\",\n    response_model=Optional[TrainingPlanInDB],\n    status_code=status.HTTP_200_OK,\n)\ndef remove_training_unit_from_training_plan(\n    training_plan_id: int,\n    training_unit_id: int,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Remove a training unit from a training plan.\n\n    Parameters:\n        training_plan_id (int): The ID of the training plan to\n        remove the training unit from.\n        training_unit_id (int): The ID of the training unit to\n        remove from the training plan.\n        db (Session, optional): The database session. Defaults to Depends(get_db).\n        user (User, optional): The current user.\n\n    Returns:\n        None\n\n    Raises:\n        HTTPException 404: If the training plan or training unit\n        with the given IDs are not found.\n        HTTPException 403: If the user does not have sufficient privileges.\n    \"\"\"\n    training_plan: TrainingPlan = training_plan_crud.get_one(\n        db, TrainingPlan.id == training_plan_id\n    )\n    if training_plan is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Training plan with id {training_plan_id} not found. \\\n            Cannot update.\",\n        )\n\n    if training_plan.owner_id != user.id and not user.is_superuser:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"The user does not have enough privileges\",\n        )\n\n    training_unit = training_unit_crud.get_one(db, TrainingUnit.id == training_unit_id)\n    if training_unit is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Training unit with id {training_unit_id} not found. \\\n            Cannot update.\",\n        )\n\n    training_plan = training_plan_crud.remove_training_unit_from_training_plan(\n        db, training_plan=training_plan, training_unit=training_unit\n    )\n    if training_plan is None:\n        raise HTTPException(\n            status_code=status.HTTP_409_CONFLICT,\n            detail=f\"Training unit with id {training_unit_id} does not exist in training plan with id {training_plan_id}\",\n        )\n    return training_plan",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "put",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_plan.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/{training_plan_id}/training-units\",\n    response_model=List[TrainingUnitInDB],\n    status_code=status.HTTP_200_OK,\n)\ndef get_training_units_in_training_plan(\n    training_plan_id: int,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Get all training units in a training plan.\n\n    Parameters:\n        training_plan_id (int): The ID of the training plan\n        to get the training units from.\n        db (Session, optional): The database session. Defaults to Depends(get_db).\n        user (User, optional): The current user.\n\n    Returns:\n        List[TrainingUnit]: A list of training units in the training plan.\n\n    Raises:\n        HTTPException 404: If the training plan with the given ID is not found.\n        HTTPException 403: If the user does not have sufficient privileges.\n    \"\"\"\n    training_plan: TrainingPlan = training_plan_crud.get_one(\n        db, TrainingPlan.id == training_plan_id\n    )\n    if training_plan is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Training plan with id {training_plan_id} not found. \",\n        )\n    if training_plan.owner_id != user.id and not user.is_superuser:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"The user does not have enough privileges\",\n        )\n\n    return training_plan.training_units",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_plan.py",
    "complexity_score": 49
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/all\",\n    response_model=List[Optional[TrainingUnitInDB]],\n    status_code=status.HTTP_200_OK,\n)\ndef get_all_training_units(\n    db: Session = Depends(get_db),\n    pagination_params: dict = Depends(get_pagination_params),\n    user: User = Depends(get_current_superuser),\n):\n    \"\"\"\n    Retrieves all training units with pagination.\n\n    Parameters:\n        db (Session): The database session.\n        pagination_params (dict): The pagination parameters.\n\n    Returns:\n        TrainingUnitsInDB: The training units retrieved from the database.\n    \"\"\"\n    skip, limit = pagination_params\n    return training_unit_crud.get_many(db, skip=skip, limit=limit)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_unit.py",
    "complexity_score": 28
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/all/my\",\n    response_model=List[Optional[TrainingUnitInDB]],\n    status_code=status.HTTP_200_OK,\n)\ndef get_all_training_units_for_owner(\n    db: Session = Depends(get_db),\n    pagination_params: dict = Depends(get_pagination_params),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Retrieves all training units for the current user with pagination.\n\n    Parameters:\n        db (Session): The database session.\n        pagination_params (dict): The pagination parameters.\n        user (User): The current active user.\n\n    Returns:\n        TrainingUnitsInDB: The training units retrieved from the database.\n    \"\"\"\n    skip, limit = pagination_params\n    return training_unit_crud.get_many_for_owner(\n        db, owner_id=user.id, skip=skip, limit=limit\n    )",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_unit.py",
    "complexity_score": 31
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/{training_unit_id}\",\n    response_model=Optional[TrainingUnitInDB],\n    status_code=status.HTTP_200_OK,\n)\ndef get_training_unit_by_id(\n    training_unit_id: int,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Retrieves a training unit by ID.\n\n    Parameters:\n        training_unit_id (int): The ID of the training unit.\n        db (Session): The database session.\n\n    Returns:\n        Optional[TrainingUnitInDB]: The training unit retrieved\n        from the database, or None if not found.\n    \"\"\"\n    if user.is_superuser:\n        training_unit = training_unit_crud.get_one(\n            db, TrainingUnit.id == training_unit_id\n        )\n    else:\n        training_unit = training_unit_crud.get_one(\n            db, TrainingUnit.id == training_unit_id, owner_id=user.id\n        )\n    if training_unit is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Training unit with id {training_unit_id} not found\",\n        )\n    return training_unit",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_unit.py",
    "complexity_score": 43
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/name/{training_unit_name}\",\n    response_model=Optional[TrainingUnitInDB],\n    status_code=status.HTTP_200_OK,\n)\ndef get_training_unit_by_name(\n    training_unit_name: str,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Retrieves a training unit by name.\n\n    Parameters:\n        training_unit_name (str): The name of the training unit.\n        db (Session): The database session.\n\n    Returns:\n        Optional[TrainingUnitInDB]: The training unit retrieved\n        from the database, or None if not found.\n    \"\"\"\n\n    training_unit = training_unit_crud.get_one(\n        db, TrainingUnit.name == training_unit_name, owner_id=user.id\n    )\n    if training_unit is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Training unit with name {training_unit_name} not found for user {user.id}\",\n        )\n    return training_unit",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_unit.py",
    "complexity_score": 39
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/name/{training_unit_name}/superuser\",\n    response_model=List[Optional[TrainingUnitInDB]],\n    status_code=status.HTTP_200_OK,\n    include_in_schema=False,\n)\ndef get_training_units_by_name(\n    training_unit_name: str,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_superuser),\n):\n    \"\"\"\n    Retrieves a training units by name.\n\n    Parameters:\n        training_unit_name (str): The name of the training unit.\n        db (Session): The database session.\n\n    Returns:\n        List[Optional[TrainingUnitInDB]]: The training unit retrieved\n        from the database, or None if not found.\n    \"\"\"\n\n    training_unit = training_unit_crud.get_many(\n        db, TrainingUnit.name == training_unit_name\n    )\n    if training_unit is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Training unit with name {training_unit_name} not found for user {user.id}\",\n        )\n    return training_unit",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_unit.py",
    "complexity_score": 40
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post(\"/\", response_model=TrainingUnitInDB, status_code=status.HTTP_201_CREATED)\ndef create_training_unit(\n    training_unit_in: TrainingUnitCreate,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Creates a new training unit.\n\n    Parameters:\n        training_unit_in (TrainingUnitCreate): The training unit data.\n        db (Session): The database session.\n\n    Returns:\n        TrainingUnitInDB: The created training unit.\n    \"\"\"\n    training_unit = training_unit_crud.get_one(\n        db, TrainingUnit.name == training_unit_in.name, owner_id=user.id\n    )\n    if training_unit is not None:\n        raise HTTPException(\n            status_code=status.HTTP_409_CONFLICT,\n            detail=f\"Training unit with name {training_unit_in.name} already exists for user {user.id}\",\n        )\n\n    training_unit = training_unit_crud.create_with_owner(\n        db, training_unit_in, owner_id=user.id\n    )\n\n    return training_unit",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_unit.py",
    "complexity_score": 38
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.put(\n    \"/{training_unit_id}\",\n    response_model=TrainingUnitInDB,\n    status_code=status.HTTP_200_OK,\n)\ndef update_training_unit(\n    training_unit_id: int,\n    training_unit_update: TrainingUnitUpdate,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Updates a training unit.\n\n    Parameters:\n        training_unit_id (int): The ID of the training unit to update.\n        training_unit_update (TrainingUnitUpdate): The updated training unit data.\n        db (Session): The database session.\n\n    Returns:\n        TrainingUnitInDB: The updated training unit.\n    \"\"\"\n    training_unit: TrainingUnit = training_unit_crud.get_one(\n        db, TrainingUnit.id == training_unit_id\n    )\n    if training_unit is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Training unit with id {training_unit_id} not found\",\n        )\n\n    if training_unit.owner_id != user.id and not user.is_superuser:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"You do not have permission to perform this action\",\n        )\n\n    try:\n        training_unit = training_unit_crud.update(\n            db, training_unit, training_unit_update\n        )\n    except Exception as e:  # pragma: no cover\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"Could not update training unit. Error: \" + str(e),\n        ) from e\n    return training_unit",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "put",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_unit.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.delete(\"/{training_unit_id}\", status_code=status.HTTP_200_OK)\ndef delete_training_unit(\n    training_unit_id: int,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Deletes a training unit.\n\n    Parameters:\n        training_unit_id (int): The ID of the training unit to delete.\n        db (Session): The database session.\n\n    Returns:\n        Dict[str, str]: A message indicating that the training unit has been deleted.\n    \"\"\"\n    training_unit: TrainingUnit = training_unit_crud.get_one(\n        db, TrainingUnit.id == training_unit_id\n    )\n    if training_unit is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Training unit with id {training_unit_id} not found\",\n        )\n\n    if training_unit.owner_id != user.id and not user.is_superuser:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"You do not have permission to perform this action\",\n        )\n\n    try:\n        training_unit_crud.delete(db, training_unit)\n    except Exception as e:  # pragma: no cover\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"Could not delete training unit. Error: \" + str(e),\n        ) from e  # pragma: no cover\n    return {\"detail\": f\"Training unit type with id {training_unit_id} deleted.\"}",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_unit.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.put(\n    \"/{training_unit_id}/exercises/{exercise_id}/add\",\n    response_model=Optional[TrainingUnitInDB],\n    status_code=status.HTTP_200_OK,\n)\ndef add_exercise_to_training_unit(\n    training_unit_id: int,\n    exercise_id: int,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Adds an exercise to a training unit.\n\n    Parameters:\n        training_unit_id (int): The ID of the training unit.\n        exercise_id (int): The ID of the exercise.\n        db (Session, optional): The database session. Defaults to Depends(get_db).\n        user (User, optional): The current authenticated user.\n            Defaults to Depends(get_current_active_user).\n\n    Returns:\n        The updated training unit with the added exercise.\n    \"\"\"\n    training_unit = training_unit_crud.get_one(db, TrainingUnit.id == training_unit_id)\n    if training_unit is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Training unit with id {training_unit_id} not found\",\n        )\n\n    exercise = exercise_crud.get_one(db, Exercise.id == exercise_id)\n    if exercise is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Exercise with id {exercise_id} not found\",\n        )\n\n    if training_unit.owner_id != user.id and not user.is_superuser:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"You do not have permission to perform this action\",\n        )\n\n    training_unit = training_unit_crud.add_exercise_to_training_unit(\n        db, training_unit, exercise\n    )\n    if training_unit is None:\n        raise HTTPException(\n            status_code=status.HTTP_409_CONFLICT,\n            detail=f\"Exercise with id {exercise_id} already exists in training unit with id {training_unit_id}\",\n        )\n    return training_unit",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "put",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_unit.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/{training_unit_id}/exercises\", response_model=List[Optional[ExerciseInDB]]\n)\ndef get_exercises_in_training_unit(\n    training_unit_id: int,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Retrieve all exercises within a given training unit.\n\n    Parameters:\n        training_unit_id (int): The ID of the training unit.\n        db (Session): The database session.\n        user (User): The current active user.\n\n    Returns:\n        List[Exercise]: A list of exercises within the training unit.\n\n    Raises:\n        HTTPException: If the training unit is\n        not found or the user does not have permission.\n    \"\"\"\n    training_unit = training_unit_crud.get_one(db, TrainingUnit.id == training_unit_id)\n    if training_unit is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Training unit with id {training_unit_id} not found\",\n        )\n\n    if training_unit.owner_id != user.id and not user.is_superuser:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"You do not have permission to perform this action\",\n        )\n\n    return training_unit_crud.get_exercises_in_training_unit(training_unit)",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_unit.py",
    "complexity_score": 45
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.put(\n    \"/{training_unit_id}/exercises/{exercise_id}/remove\",\n    response_model=Optional[TrainingUnitInDB],\n    status_code=status.HTTP_200_OK,\n)\ndef remove_exercise_from_training_unit(\n    training_unit_id: int,\n    exercise_id: int,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_active_user),\n):\n    \"\"\"\n    Remove an exercise from a training unit.\n\n    Parameters:\n        training_unit_id (int): The ID of the training unit.\n        exercise_id (int): The ID of the exercise.\n        db (Session, optional): The database session.\n            Defaults to Depends(get_db).\n        user (User, optional): The current user.\n            Defaults to Depends(get_current_active_user).\n\n    Returns:\n        The updated training unit after removing the exercise.\n\n    Raises:\n        HTTPException: If the training unit or exercise is not found,\n        or if the user does not have permission.\n    \"\"\"\n    training_unit = training_unit_crud.get_one(db, TrainingUnit.id == training_unit_id)\n    if training_unit is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Training unit with id {training_unit_id} not found\",\n        )\n\n    exercise = exercise_crud.get_one(db, Exercise.id == exercise_id)\n    if exercise is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Exercise with id {exercise_id} not found\",\n        )\n\n    if training_unit.owner_id != user.id and not user.is_superuser:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"You do not have permission to perform this action\",\n        )\n\n    try:\n        training_unit_crud.remove_exercise_from_training_unit(\n            db, training_unit, exercise\n        )\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_409_CONFLICT,\n            detail=f\"Exercise with id {exercise_id} not found in training unit with id {training_unit_id}\",\n        ) from e\n    return training_unit",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "put",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/training_unit.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/all\", response_model=List[Optional[UserOut]], status_code=status.HTTP_200_OK\n)\ndef fetch_all_users(\n    db: Session = Depends(get_db), pagination_params=Depends(get_pagination_params)\n):\n    \"\"\"\n    Fetches all users with pagination.\n\n    Parameters:\n        db (Session): The database session.\n        pagination_params (Tuple[int, int]): A tuple with\n            the skip and limit values for pagination.\n\n    Returns:\n        List[Optional[UserOut]]: A list of user objects,\n            or None if there are no users.\n\n    Raises:\n        None\n    \"\"\"\n    skip, limit = pagination_params\n    return user_crud.get_many(db, skip=skip, limit=limit)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/user.py",
    "complexity_score": 29
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\"/{user_id}\", response_model=UserOut, status_code=status.HTTP_200_OK)\ndef fetch_user_by_id(user_id: int, db: Session = Depends(get_db)):\n    \"\"\"\n    Fetches a user by their ID from the database.\n\n    Parameters:\n        user_id (int): The ID of the user to fetch.\n        db (Session): The database session.\n\n    Returns:\n        UserOut: The user object fetched from the database.\n\n    Raises:\n        HTTPException: If the user with the specified ID is not found in the database.\n    \"\"\"\n    user = user_crud.get_one(db, User.id == user_id)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"User with {user_id} not found\",\n        )\n    return user",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/user.py",
    "complexity_score": 30
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\"/email/{email}\", response_model=UserOut, status_code=status.HTTP_200_OK)\ndef fetch_user_by_email(email: str, db: Session = Depends(get_db)):\n    \"\"\"\n    Fetches a user from the database based on the provided email.\n\n    Parameters:\n        email (str): The email address of the user.\n        db (Session, optional): The database session.\n        Defaults to the result of calling `get_db`.\n\n    Returns:\n        UserOut: The user object fetched from the database.\n\n    Raises:\n        HTTPException: If no user is found with the provided email,\n            an HTTP 404 Not Found exception is raised.\n    \"\"\"\n    user = user_crud.get_user_by_email(db, email=email)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=f\"User with {email} not found\"\n        )\n    return user",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/user.py",
    "complexity_score": 33
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post(\"/\", response_model=UserOut, status_code=status.HTTP_201_CREATED)\ndef create_user(\n    user_create: UserCreate,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_superuser),\n):\n    \"\"\"\n    Create a new user.\n\n    Parameters:\n        user_create (UserCreate): The user data to be created.\n        db (Session): The database session.\n        user (User): The current superuser.\n\n    Returns:\n        User: The newly created user.\n\n    Raises:\n        HTTPException: If a user with the same email already exists in the system.\n    \"\"\"\n    user = user_crud.get_user_by_email(db, email=user_create.email)\n    if user is not None:\n        raise HTTPException(\n            status_code=status.HTTP_409_CONFLICT,\n            detail=f\"The user with this {user_create.email} already exists \\\n            in the system\",\n        )\n    user_in = UserInDB(\n        **user_create.model_dump(),\n        hashed_password=get_password_hash(user_create.password),\n    )\n    user = user_crud.create(db, user_in)\n    return user",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/user.py",
    "complexity_score": 41
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.delete(\"/{user_id}\", status_code=status.HTTP_200_OK)\ndef delete_user(\n    user_id: int,\n    db: Session = Depends(get_db),\n    current_user: User = Depends(get_current_superuser),\n):\n    \"\"\"\n    Delete a user by user ID.\n\n    Parameters:\n        user_id (int): The ID of the user to delete.\n        db (Session, optional): The database session. Defaults to Depends(get_db).\n        current_user (User, optional): The current authenticated superuser.\n\n    Raises:\n        HTTPException: If the user is not found or the user tries to delete themselves.\n        HTTPException: If there is an error deleting the user.\n\n    Returns:\n        None\n\n    \"\"\"\n    user = user_crud.get_one(db, User.id == user_id)\n    if user is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"User with id {user_id} not found. Cannot delete.\",\n        )\n\n    if user.id == current_user.id:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"You cannot delete yourself\",\n        )\n    try:\n        user_crud.delete(db, user)\n    except Exception as e:  # pragma: no cover\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Couldn't delete user with id {user_id}. Error: {str(e)}\",\n        ) from e  # pragma: no cover\n\n    return {\"detail\": f\"User with id {user_id} deleted.\"}",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/user.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.put(\"/{user_id}\", response_model=UserOut, status_code=status.HTTP_200_OK)\ndef update_user(\n    user_id: int,\n    user_update: UserUpdate,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_superuser),\n):\n    \"\"\"\n    Update a user with the given ID.\n\n    Parameters:\n        user_id (int): The ID of the user to update.\n        user_update (UserUpdate): The updated user information.\n        db (Session, optional): The database session. Defaults to Depends(get_db).\n        user (User, optional): The current superuser.\n\n    Returns:\n        UserOut: The updated user information.\n\n    Raises:\n        HTTPException: If the user is not found or the user tries to update themselves.\n        HTTPException: If there is an error updating the user.\n    \"\"\"\n    user = user_crud.get_one(db, User.id == user_id)\n    if user is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"User with id {user_id} not found. Cannot update.\",\n        )\n    try:\n        user = user_crud.update(db, user, user_update)\n    except Exception as e:  # pragma: no cover\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Couldn't update user with id {user_id}. Error: {str(e)}\",\n        ) from e  # pragma: no cover\n    return user",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "put",
      "authentication",
      "database"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/api/routes/user.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello world\"}",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "JakubPluta/gymhero",
    "source_file": "gymhero/main.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/api/healthchecker\")\ndef root():\n    return {\"message\": \"Welcome to FastAPI with MongoDB\"}",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "wpcodevo/fastapi_mongodb",
    "source_file": "app/main.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@router.post('/login')\ndef login(payload: schemas.LoginUserSchema, response: Response, Authorize: AuthJWT = Depends()):\n    # Check if the user exist\n    db_user = User.find_one({'email': payload.email.lower()})\n    if not db_user:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                            detail='Incorrect Email or Password')\n    user = userEntity(db_user)\n\n    # Check if user verified his email\n    if not user['verified']:\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                            detail='Please verify your email address')\n\n    # Check if the password is valid\n    if not utils.verify_password(payload.password, user['password']):\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                            detail='Incorrect Email or Password')\n\n    # Create access token\n    access_token = Authorize.create_access_token(\n        subject=str(user[\"id\"]), expires_time=timedelta(minutes=ACCESS_TOKEN_EXPIRES_IN))\n\n    # Create refresh token\n    refresh_token = Authorize.create_refresh_token(\n        subject=str(user[\"id\"]), expires_time=timedelta(minutes=REFRESH_TOKEN_EXPIRES_IN))\n\n    # Store refresh and access tokens in cookie\n    response.set_cookie('access_token', access_token, ACCESS_TOKEN_EXPIRES_IN * 60,\n                        ACCESS_TOKEN_EXPIRES_IN * 60, '/', None, False, True, 'lax')\n    response.set_cookie('refresh_token', refresh_token,\n                        REFRESH_TOKEN_EXPIRES_IN * 60, REFRESH_TOKEN_EXPIRES_IN * 60, '/', None, False, True, 'lax')\n    response.set_cookie('logged_in', 'True', ACCESS_TOKEN_EXPIRES_IN * 60,\n                        ACCESS_TOKEN_EXPIRES_IN * 60, '/', None, False, False, 'lax')\n\n    # Send both access\n    return {'status': 'success', 'access_token': access_token}",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "wpcodevo/fastapi_mongodb",
    "source_file": "app/routers/auth.py",
    "complexity_score": 42
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get('/refresh')\ndef refresh_token(response: Response, Authorize: AuthJWT = Depends()):\n    try:\n        Authorize.jwt_refresh_token_required()\n\n        user_id = Authorize.get_jwt_subject()\n        if not user_id:\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                                detail='Could not refresh access token')\n        user = userEntity(User.find_one({'_id': ObjectId(str(user_id))}))\n        if not user:\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                                detail='The user belonging to this token no logger exist')\n        access_token = Authorize.create_access_token(\n            subject=str(user[\"id\"]), expires_time=timedelta(minutes=ACCESS_TOKEN_EXPIRES_IN))\n    except Exception as e:\n        error = e.__class__.__name__\n        if error == 'MissingTokenError':\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST, detail='Please provide refresh token')\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST, detail=error)\n\n    response.set_cookie('access_token', access_token, ACCESS_TOKEN_EXPIRES_IN * 60,\n                        ACCESS_TOKEN_EXPIRES_IN * 60, '/', None, False, True, 'lax')\n    response.set_cookie('logged_in', 'True', ACCESS_TOKEN_EXPIRES_IN * 60,\n                        ACCESS_TOKEN_EXPIRES_IN * 60, '/', None, False, False, 'lax')\n    return {'access_token': access_token}",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "wpcodevo/fastapi_mongodb",
    "source_file": "app/routers/auth.py",
    "complexity_score": 42
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication",
    "input": "Include authentication and authorization",
    "output": "@router.get('/logout', status_code=status.HTTP_200_OK)\ndef logout(response: Response, Authorize: AuthJWT = Depends(), user_id: str = Depends(oauth2.require_user)):\n    Authorize.unset_jwt_cookies()\n    response.set_cookie('logged_in', '', -1)\n\n    return {'status': 'success'}",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication"
    ],
    "source_repo": "wpcodevo/fastapi_mongodb",
    "source_file": "app/routers/auth.py",
    "complexity_score": 13
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get('/verifyemail/{token}')\ndef verify_me(token: str):\n    hashedCode = hashlib.sha256()\n    hashedCode.update(bytes.fromhex(token))\n    verification_code = hashedCode.hexdigest()\n    result = User.find_one_and_update({\"verification_code\": verification_code}, {\n        \"$set\": {\"verification_code\": None, \"verified\": True, \"updated_at\": datetime.utcnow()}}, new=True)\n    if not result:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN, detail='Invalid verification code or account already verified')\n    return {\n        \"status\": \"success\",\n        \"message\": \"Account verified successfully\"\n    }",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "wpcodevo/fastapi_mongodb",
    "source_file": "app/routers/auth.py",
    "complexity_score": 16
  },
  {
    "instruction": "Create a FastAPI GET endpoint with Pydantic validation and with authentication",
    "input": "Include proper request validation",
    "output": "@router.get('/')\ndef get_posts(limit: int = 10, page: int = 1, search: str = '', user_id: str = Depends(require_user)):\n    skip = (page - 1) * limit\n    pipeline = [\n        {'$match': {}},\n        {'$lookup': {'from': 'users', 'localField': 'user',\n                     'foreignField': '_id', 'as': 'user'}},\n        {'$unwind': '$user'},\n        {\n            '$skip': skip\n        }, {\n            '$limit': limit\n        }\n    ]\n    posts = postListEntity(Post.aggregate(pipeline))\n    return {'status': 'success', 'results': len(posts), 'posts': posts}",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "pydantic",
      "authentication"
    ],
    "source_repo": "wpcodevo/fastapi_mongodb",
    "source_file": "app/routers/post.py",
    "complexity_score": 19
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@router.post('/', status_code=status.HTTP_201_CREATED)\ndef create_post(post: schemas.CreatePostSchema, user_id: str = Depends(require_user)):\n    post.user = ObjectId(user_id)\n    post.created_at = datetime.utcnow()\n    post.updated_at = post.created_at\n    try:\n        result = Post.insert_one(post.dict())\n        pipeline = [\n            {'$match': {'_id': result.inserted_id}},\n            {'$lookup': {'from': 'users', 'localField': 'user',\n                         'foreignField': '_id', 'as': 'user'}},\n            {'$unwind': '$user'},\n        ]\n        new_post = postListEntity(Post.aggregate(pipeline))[0]\n        return new_post\n    except DuplicateKeyError:\n        raise HTTPException(status_code=status.HTTP_409_CONFLICT,\n                            detail=f\"Post with title: '{post.title}' already exists\")",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "wpcodevo/fastapi_mongodb",
    "source_file": "app/routers/post.py",
    "complexity_score": 28
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@router.put('/{id}')\ndef update_post(id: str, payload: schemas.UpdatePostSchema, user_id: str = Depends(require_user)):\n    if not ObjectId.is_valid(id):\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                            detail=f\"Invalid id: {id}\")\n    updated_post = Post.find_one_and_update(\n        {'_id': ObjectId(id)}, {'$set': payload.dict(exclude_none=True)}, return_document=ReturnDocument.AFTER)\n    if not updated_post:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f'No post with this id: {id} found')\n    return postEntity(updated_post)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "put",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "wpcodevo/fastapi_mongodb",
    "source_file": "app/routers/post.py",
    "complexity_score": 16
  },
  {
    "instruction": "Create a FastAPI GET endpoint with Pydantic validation and with authentication",
    "input": "Include proper request validation",
    "output": "@router.get('/{id}')\ndef get_post(id: str, user_id: str = Depends(require_user)):\n    if not ObjectId.is_valid(id):\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                            detail=f\"Invalid id: {id}\")\n    pipeline = [\n        {'$match': {'_id': ObjectId(id)}},\n        {'$lookup': {'from': 'users', 'localField': 'user',\n                     'foreignField': '_id', 'as': 'user'}},\n        {'$unwind': '$user'},\n    ]\n    db_cursor = Post.aggregate(pipeline)\n    results = list(db_cursor)\n\n    if len(results) == 0:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"No post with this id: {id} found\")\n\n    post = postListEntity(results)[0]\n    return post",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "pydantic",
      "authentication"
    ],
    "source_repo": "wpcodevo/fastapi_mongodb",
    "source_file": "app/routers/post.py",
    "complexity_score": 25
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.delete('/{id}')\ndef delete_post(id: str, user_id: str = Depends(require_user)):\n    if not ObjectId.is_valid(id):\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                            detail=f\"Invalid id: {id}\")\n    post = Post.find_one_and_delete({'_id': ObjectId(id)})\n    if not post:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f'No post with this id: {id} found')\n    return Response(status_code=status.HTTP_204_NO_CONTENT)",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "wpcodevo/fastapi_mongodb",
    "source_file": "app/routers/post.py",
    "complexity_score": 15
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication",
    "input": "Include authentication and authorization",
    "output": "@router.get('/me', response_model=schemas.UserResponse)\ndef get_me(user_id: str = Depends(oauth2.require_user)):\n    user = userResponseEntity(User.find_one({'_id': ObjectId(str(user_id))}))\n    return {\"status\": \"success\", \"user\": user}",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication"
    ],
    "source_repo": "wpcodevo/fastapi_mongodb",
    "source_file": "app/routers/user.py",
    "complexity_score": 7
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get('/api/healthchecker')\ndef root():\n    return {'message': 'Hello World'}",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "wpcodevo/python_fastapi",
    "source_file": "app/main.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@router.post('/login')\ndef login(payload: schemas.LoginUserSchema, response: Response, db: Session = Depends(get_db), Authorize: AuthJWT = Depends()):\n    # Check if the user exist\n    user = db.query(models.User).filter(\n        models.User.email == EmailStr(payload.email.lower())).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                            detail='Incorrect Email or Password')\n\n    # Check if user verified his email\n    if not user.verified:\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                            detail='Please verify your email address')\n\n    # Check if the password is valid\n    if not utils.verify_password(payload.password, user.password):\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                            detail='Incorrect Email or Password')\n\n    # Create access token\n    access_token = Authorize.create_access_token(\n        subject=str(user.id), expires_time=timedelta(minutes=ACCESS_TOKEN_EXPIRES_IN))\n\n    # Create refresh token\n    refresh_token = Authorize.create_refresh_token(\n        subject=str(user.id), expires_time=timedelta(minutes=REFRESH_TOKEN_EXPIRES_IN))\n\n    # Store refresh and access tokens in cookie\n    response.set_cookie('access_token', access_token, ACCESS_TOKEN_EXPIRES_IN * 60,\n                        ACCESS_TOKEN_EXPIRES_IN * 60, '/', None, False, True, 'lax')\n    response.set_cookie('refresh_token', refresh_token,\n                        REFRESH_TOKEN_EXPIRES_IN * 60, REFRESH_TOKEN_EXPIRES_IN * 60, '/', None, False, True, 'lax')\n    response.set_cookie('logged_in', 'True', ACCESS_TOKEN_EXPIRES_IN * 60,\n                        ACCESS_TOKEN_EXPIRES_IN * 60, '/', None, False, False, 'lax')\n\n    # Send both access\n    return {'status': 'success', 'access_token': access_token}",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "wpcodevo/python_fastapi",
    "source_file": "app/routers/auth.py",
    "complexity_score": 45
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get('/refresh')\ndef refresh_token(response: Response, request: Request, Authorize: AuthJWT = Depends(), db: Session = Depends(get_db)):\n    try:\n        Authorize.jwt_refresh_token_required()\n\n        user_id = Authorize.get_jwt_subject()\n        if not user_id:\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                                detail='Could not refresh access token')\n        user = db.query(models.User).filter(models.User.id == user_id).first()\n        if not user:\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                                detail='The user belonging to this token no logger exist')\n        access_token = Authorize.create_access_token(\n            subject=str(user.id), expires_time=timedelta(minutes=ACCESS_TOKEN_EXPIRES_IN))\n    except Exception as e:\n        error = e.__class__.__name__\n        if error == 'MissingTokenError':\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST, detail='Please provide refresh token')\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST, detail=error)\n\n    response.set_cookie('access_token', access_token, ACCESS_TOKEN_EXPIRES_IN * 60,\n                        ACCESS_TOKEN_EXPIRES_IN * 60, '/', None, False, True, 'lax')\n    response.set_cookie('logged_in', 'True', ACCESS_TOKEN_EXPIRES_IN * 60,\n                        ACCESS_TOKEN_EXPIRES_IN * 60, '/', None, False, False, 'lax')\n    return {'access_token': access_token}",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "wpcodevo/python_fastapi",
    "source_file": "app/routers/auth.py",
    "complexity_score": 45
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get('/verifyemail/{token}')\ndef verify_me(token: str, db: Session = Depends(get_db)):\n    hashedCode = hashlib.sha256()\n    hashedCode.update(bytes.fromhex(token))\n    verification_code = hashedCode.hexdigest()\n    user_query = db.query(models.User).filter(\n        models.User.verification_code == verification_code)\n    db.commit()\n    user = user_query.first()\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN, detail='Email can only be verified once')\n    user_query.update(\n        {'verified': True, 'verification_code': None}, synchronize_session=False)\n    db.commit()\n    return {\n        \"status\": \"success\",\n        \"message\": \"Account verified successfully\"\n    }",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "wpcodevo/python_fastapi",
    "source_file": "app/routers/auth.py",
    "complexity_score": 27
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get('/', response_model=schemas.ListPostResponse)\ndef get_posts(db: Session = Depends(get_db), limit: int = 10, page: int = 1, search: str = '', user_id: str = Depends(require_user)):\n    skip = (page - 1) * limit\n\n    posts = db.query(models.Post).group_by(models.Post.id).filter(\n        models.Post.title.contains(search)).limit(limit).offset(skip).all()\n    return {'status': 'success', 'results': len(posts), 'posts': posts}",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "wpcodevo/python_fastapi",
    "source_file": "app/routers/post.py",
    "complexity_score": 13
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@router.post('/', status_code=status.HTTP_201_CREATED, response_model=schemas.PostResponse)\ndef create_post(post: schemas.CreatePostSchema, db: Session = Depends(get_db), owner_id: str = Depends(require_user)):\n    post.user_id = uuid.UUID(owner_id)\n    new_post = models.Post(**post.dict())\n    db.add(new_post)\n    db.commit()\n    db.refresh(new_post)\n    return new_post",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "wpcodevo/python_fastapi",
    "source_file": "app/routers/post.py",
    "complexity_score": 14
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@router.put('/{id}', response_model=schemas.PostResponse)\ndef update_post(id: str, post: schemas.UpdatePostSchema, db: Session = Depends(get_db), user_id: str = Depends(require_user)):\n    post_query = db.query(models.Post).filter(models.Post.id == id)\n    updated_post = post_query.first()\n\n    if not updated_post:\n        raise HTTPException(status_code=status.HTTP_200_OK,\n                            detail=f'No post with this id: {id} found')\n    if updated_post.user_id != uuid.UUID(user_id):\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,\n                            detail='You are not allowed to perform this action')\n    post.user_id = user_id\n    post_query.update(post.dict(exclude_unset=True), synchronize_session=False)\n    db.commit()\n    return updated_post",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "put",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "wpcodevo/python_fastapi",
    "source_file": "app/routers/post.py",
    "complexity_score": 23
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get('/{id}', response_model=schemas.PostResponse)\ndef get_post(id: str, db: Session = Depends(get_db), user_id: str = Depends(require_user)):\n    post = db.query(models.Post).filter(models.Post.id == id).first()\n    if not post:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"No post with this id: {id} found\")\n    return post",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "wpcodevo/python_fastapi",
    "source_file": "app/routers/post.py",
    "complexity_score": 15
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.delete('/{id}')\ndef delete_post(id: str, db: Session = Depends(get_db), user_id: str = Depends(require_user)):\n    post_query = db.query(models.Post).filter(models.Post.id == id)\n    post = post_query.first()\n    if not post:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f'No post with this id: {id} found')\n\n    if str(post.user_id) != user_id:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,\n                            detail='You are not allowed to perform this action')\n    post_query.delete(synchronize_session=False)\n    db.commit()\n    return Response(status_code=status.HTTP_204_NO_CONTENT)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "wpcodevo/python_fastapi",
    "source_file": "app/routers/post.py",
    "complexity_score": 22
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get('/me', response_model=schemas.UserResponse)\ndef get_me(db: Session = Depends(get_db), user_id: str = Depends(oauth2.require_user)):\n    user = db.query(models.User).filter(models.User.id == user_id).first()\n    return user",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "wpcodevo/python_fastapi",
    "source_file": "app/routers/user.py",
    "complexity_score": 10
  },
  {
    "instruction": "Create a FastAPI POST endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.post(\"/v1/system_components\", response_model=SystemComponent)\ndef create_system_component(component: SystemComponent) -> None:\n    \"\"\"Create a new system component in our monitored system.\"\"\"\n\n    if component.name in in_memory_db[\"system_components\"]:\n        error_msg = f\"{component.name} already exists in the monitored system.\"\n        raise HTTPException(status_code=409, detail=error_msg)\n\n    api_utils.register_system_component(component, in_memory_db)\n    api_utils.register_system_event(component, in_memory_db)\n\n    return component",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post"
    ],
    "source_repo": "NHopewell/diskspace-monitor-CRUD",
    "source_file": "src/diskspacemonitor/main.py",
    "complexity_score": 14
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/v1/system_components/{component_name}\", response_model=SystemComponent)\ndef read_system_component(component_name: str) -> t.Dict[str, str]:\n    \"\"\"Retrieve data regarding a single system component of our monitored system.\n\n    Path Parameters\n    ---------------\n    component_name: str\n        the unique name of a system component.\n    \"\"\"\n    if component_name not in in_memory_db[\"system_components\"]:\n        error_msg = f\"{component_name} does not exist in the monitored system.\"\n        raise HTTPException(status_code=404, detail=error_msg)\n\n    component = api_utils.get_system_component(component_name, in_memory_db)\n\n    return component",
    "category": "endpoints",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "NHopewell/diskspace-monitor-CRUD",
    "source_file": "src/diskspacemonitor/main.py",
    "complexity_score": 18
  },
  {
    "instruction": "Create a FastAPI PATCH endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.patch(\"/v1/system_components/{component_name}\", response_model=SystemComponent)\ndef update_system_component(\n    component_name: str, updated_component: SystemComponentUpdate\n) -> None:\n    \"\"\"Update system component in our monitored system.\n\n    Path Parameters\n    ---------------\n    component_name: str\n        the unique name of a system component.\n\n    \"\"\"\n    if component_name not in in_memory_db[\"system_components\"]:\n        error_msg = f\"{component_name} does not exist in the monitored system.\"\n        raise HTTPException(status_code=404, detail=error_msg)\n\n    system_component = in_memory_db[\"system_components\"][component_name]\n\n    # update component total storage if in request\n    if new_total := updated_component.total_available_storage:\n        system_component.total_available_storage = new_total\n\n    # update component storage limit if in request\n    if new_storage_limit := updated_component.storage_limit:\n        try:\n            system_component.set_storage_limit(new_storage_limit)\n        except monitor_warnings.StorageLimitOutOfRangeError:\n\n            error_msg = f\"{new_storage_limit} is not a valid storage limit. Must be between 0 - 100\"\n            raise HTTPException(status_code=400, detail=error_msg)\n\n    # update component storage useage if in request\n    warning_flag, warning_type = False, None\n\n    if new_current_useage := updated_component.current_storage_useage:\n        try:\n            system_component.set_current_storage_useage(new_current_useage)\n\n        except monitor_warnings.OverMemoryLimitError:\n            warning_flag, warning_type = (\n                True,\n                monitor_warnings.WarningEnum.over_memory_limit,\n            )\n\n        except monitor_warnings.CloseToMemoryLimitError:\n            warning_flag, warning_type = (\n                True,\n                monitor_warnings.WarningEnum.close_to_memory_limit,\n            )\n\n    if warning_flag:\n        # register new system event along with a resource warning\n        api_utils.register_system_event(system_component, in_memory_db, warning_type)\n    else:\n        # register new system event only\n        api_utils.register_system_event(system_component, in_memory_db)\n\n    return system_component",
    "category": "database",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "patch",
      "database"
    ],
    "source_repo": "NHopewell/diskspace-monitor-CRUD",
    "source_file": "src/diskspacemonitor/main.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.delete(\"/v1/system_components/{component_name}\")\ndef delete_system_component(component_name: str) -> None:\n    \"\"\"Remove a system component from our monitored system.\n\n    Path Parameters\n    ---------------\n    component_name: str\n        the unique name of a system component.\n    \"\"\"\n    if component_name not in in_memory_db[\"system_components\"]:\n        error_msg = f\"{component_name} does not exist in the monitored system.\"\n        raise HTTPException(status_code=404, detail=error_msg)\n\n    # not deleting the component from events or warnings to have backlog\n    del in_memory_db[\"system_components\"][component_name]\n\n    return Response(status_code=204)",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "delete",
      "database"
    ],
    "source_repo": "NHopewell/diskspace-monitor-CRUD",
    "source_file": "src/diskspacemonitor/main.py",
    "complexity_score": 19
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/v1/system_components\")\ndef list_system_components(\n    skip: int = 0, limit: t.Optional[int] = 100\n) -> t.List[t.Dict[str, str]]:\n    \"\"\"List all currently monitored components of our system.\n\n    Query Parameters\n    ----------------\n    skip: int\n        The number of system components in our result set to skip.\n    limit: int\n        The total number of system components to return.\n    \"\"\"\n    all_system_components = list(in_memory_db[\"system_components\"].values())\n    filtered = all_system_components[skip : skip + limit]\n\n    return filtered",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "NHopewell/diskspace-monitor-CRUD",
    "source_file": "src/diskspacemonitor/main.py",
    "complexity_score": 17
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/v1/component_events/{component_name}\")\ndef get_latest_useage(component_name: str) -> t.Dict[str, str]:\n    \"\"\"\n    Retrieve the latest storage useage of a component in the system.\n\n    Path Parameters\n    ---------------\n    component_name: str\n        the unique name of a system component.\n    \"\"\"\n    all_component_events = in_memory_db[\"system_events\"][component_name]\n    latest_event = all_component_events[len(all_component_events) - 1]\n\n    return latest_event.return_custom_event_dict()",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "NHopewell/diskspace-monitor-CRUD",
    "source_file": "src/diskspacemonitor/main.py",
    "complexity_score": 14
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/v1/component_events/{component_name}/history\")\ndef get_useage_history(\n    component_name: str, skip: int = 0, limit: t.Optional[int] = 100\n) -> t.List[t.Dict[str, str]]:\n    \"\"\"\n    List complete storage useage history for a component in the system.\n\n    Path Parameters\n    ---------------\n    component_name: str\n        the unique name of a system component.\n\n    Query Parameters\n    ----------------\n    skip: int\n        The number of component events in our result set to skip.\n    limit: int\n        The total number of component events to return.\n    \"\"\"\n    all_component_events = in_memory_db[\"system_events\"][component_name]\n    event_history_response = [\n        event.return_custom_event_dict() for event in all_component_events\n    ]\n\n    filtered = event_history_response[skip : skip + limit]\n\n    return filtered",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "NHopewell/diskspace-monitor-CRUD",
    "source_file": "src/diskspacemonitor/main.py",
    "complexity_score": 27
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/v1/component_events\")\ndef get_all_latest_useages(\n    skip: int = 0, limit: t.Optional[int] = 100\n) -> t.List[t.Dict[str, str]]:\n    \"\"\"List the latest storage useage of all component in the system.\n\n    Query Parameters\n    ----------------\n    skip: int\n        The number of component events in our result set to skip.\n    limit: int\n        The total number of component events to return.\n    \"\"\"\n\n    all_components = in_memory_db[\"system_events\"].keys()\n\n    latest_events = []\n    for component in all_components:\n        all_component_events = in_memory_db[\"system_events\"][component]\n        latest_events.append(all_component_events[len(all_component_events) - 1])\n\n    latest_events_for_each_component_response = [\n        event.return_custom_event_dict() for event in latest_events\n    ]\n\n    filtered = latest_events_for_each_component_response[skip : skip + limit]\n\n    return filtered",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "NHopewell/diskspace-monitor-CRUD",
    "source_file": "src/diskspacemonitor/main.py",
    "complexity_score": 28
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/v1/resource_warnings\")\ndef list_resource_warnings(\n    skip: int = 0, limit: t.Optional[int] = 100\n) -> t.List[t.Dict[str, str]]:\n    \"\"\"List all current resource warnings in our s.\n\n    Query Parameters\n    ----------------\n    skip: int\n        The number of system components in our result set to skip.\n    limit: int\n        The total number of system components to return.\n    \"\"\"\n    # extract all resource warnings from the db and pair to the component\n    # that triggered them\n    system_components = in_memory_db[\"system_events\"].keys()\n    warning_objects = api_utils.get_all_warnings(system_components, in_memory_db)\n    paired = api_utils.list_warning_dicts(\n        warning_objects, system_components, in_memory_db\n    )\n\n    filtered = paired[skip : skip + limit]\n\n    return filtered",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "NHopewell/diskspace-monitor-CRUD",
    "source_file": "src/diskspacemonitor/main.py",
    "complexity_score": 24
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/api/healthchecker\")\ndef root():\n    return {\"message\": \"Welcome to FastAPI with SQLAlchemy\"}",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "wpcodevo/fastapi_sqlalchemy",
    "source_file": "app/main.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/api/db-healthchecker\")\ndef db_healthchecker(db: Session = Depends(get_db)):\n    try:\n        # Attempt to execute a simple query to check database connectivity\n        db.execute(\"SELECT 1\")\n        return {\"message\": \"Database is healthy\"}\n    except OperationalError:\n        raise HTTPException(status_code=500, detail=\"Database is not reachable\")",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "wpcodevo/fastapi_sqlalchemy",
    "source_file": "app/main.py",
    "complexity_score": 21
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/\")\ndef home():\n    return {\"message\": \"Welcome to FastAPI CRUD Example.\"}",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "Mr-Manna/FastAPI-CRUD",
    "source_file": "main.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/api/healthchecker\")\ndef root():\n    return {\"message\": \"The API is LIVE!!\"}",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "Pytest-with-Eric/pytest-fastapi-crud-example",
    "source_file": "app/main.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@router.post(\n    \"/\", status_code=status.HTTP_201_CREATED, response_model=schemas.UserResponse\n)\ndef create_user(payload: schemas.UserBaseSchema, db: Session = Depends(get_db)):\n    try:\n        # Create a new user instance from the payload\n        new_user = models.User(**payload.model_dump())\n        db.add(new_user)\n        db.commit()\n        db.refresh(new_user)\n\n    except IntegrityError as e:\n        db.rollback()\n        # Log the error or handle it as needed\n        raise HTTPException(\n            status_code=status.HTTP_409_CONFLICT,\n            detail=\"A user with the given details already exists.\",\n        ) from e\n    except Exception as e:\n        db.rollback()\n        # Handle other types of database errors\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"An error occurred while creating the user.\",\n        ) from e\n\n    # Convert the SQLAlchemy model instance to a Pydantic model\n    user_schema = schemas.UserBaseSchema.from_orm(new_user)\n    # Return the successful creation response\n    return schemas.UserResponse(Status=schemas.Status.Success, User=user_schema)",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "Pytest-with-Eric/pytest-fastapi-crud-example",
    "source_file": "app/user.py",
    "complexity_score": 43
  },
  {
    "instruction": "Create a FastAPI GET endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@router.get(\n    \"/{userId}\", status_code=status.HTTP_200_OK, response_model=schemas.GetUserResponse\n)\ndef get_user(userId: str, db: Session = Depends(get_db)):\n    user_query = db.query(models.User).filter(models.User.id == userId)\n    db_user = user_query.first()\n\n    if not db_user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"No User with this id: `{userId}` found\",\n        )\n\n    try:\n        return schemas.GetUserResponse(\n            Status=schemas.Status.Success, User=schemas.UserBaseSchema.model_validate(db_user)\n        )\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"An unexpected error occurred while fetching the user.\",\n        ) from e",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "Pytest-with-Eric/pytest-fastapi-crud-example",
    "source_file": "app/user.py",
    "complexity_score": 35
  },
  {
    "instruction": "Create a FastAPI PATCH endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@router.patch(\n    \"/{userId}\",\n    status_code=status.HTTP_202_ACCEPTED,\n    response_model=schemas.UserResponse,\n)\ndef update_user(\n    userId: str, payload: schemas.UserBaseSchema, db: Session = Depends(get_db)\n):\n    user_query = db.query(models.User).filter(models.User.id == userId)\n    db_user = user_query.first()\n\n    if not db_user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"No User with this id: `{userId}` found\",\n        )\n\n    try:\n        update_data = payload.dict(exclude_unset=True)\n        user_query.update(update_data, synchronize_session=False)\n        db.commit()\n        db.refresh(db_user)\n        user_schema = schemas.UserBaseSchema.model_validate(db_user)\n        return schemas.UserResponse(Status=schemas.Status.Success, User=user_schema)\n    except IntegrityError as e:\n        db.rollback()\n        raise HTTPException(\n            status_code=status.HTTP_409_CONFLICT,\n            detail=\"A user with the given details already exists.\",\n        ) from e\n    except Exception as e:\n        db.rollback()\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"An error occurred while updating the user.\",\n        ) from e",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "patch",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "Pytest-with-Eric/pytest-fastapi-crud-example",
    "source_file": "app/user.py",
    "complexity_score": 49
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.delete(\n    \"/{userId}\",\n    status_code=status.HTTP_202_ACCEPTED,\n    response_model=schemas.DeleteUserResponse,\n)\ndef delete_user(userId: str, db: Session = Depends(get_db)):\n    try:\n        user_query = db.query(models.User).filter(models.User.id == userId)\n        user = user_query.first()\n        if not user:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=f\"No User with this id: `{userId}` found\",\n            )\n        user_query.delete(synchronize_session=False)\n        db.commit()\n        return schemas.DeleteUserResponse(\n            Status=schemas.Status.Success, Message=\"User deleted successfully\"\n        )\n    except Exception as e:\n        db.rollback()\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"An error occurred while deleting the user.\",\n        ) from e",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "Pytest-with-Eric/pytest-fastapi-crud-example",
    "source_file": "app/user.py",
    "complexity_score": 38
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\n    \"/\", status_code=status.HTTP_200_OK, response_model=schemas.ListUserResponse\n)\ndef get_users(\n    db: Session = Depends(get_db), limit: int = 10, page: int = 1, search: str = \"\"\n):\n    skip = (page - 1) * limit\n\n    users = (\n        db.query(models.User)\n        .filter(models.User.first_name.contains(search))\n        .limit(limit)\n        .offset(skip)\n        .all()\n    )\n    return schemas.ListUserResponse(\n        status=schemas.Status.Success, results=len(users), users=users\n    )",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "Pytest-with-Eric/pytest-fastapi-crud-example",
    "source_file": "app/user.py",
    "complexity_score": 24
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/health\")\ndef health():\n    \"\"\"\n    Health router.\n    \"\"\"\n    logger.info(\"this is health\")\n    result = {\n        \"status\": \"ok\",\n        \"info\": get_info()\n    }\n    return result",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "WMRamadan/fastapi-boilerplate",
    "source_file": "api/main.py",
    "complexity_score": 11
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\"/items/\", response_model=List[items_schema.Item])\ndef read_items(skip: int = 0, limit: int = 100,\ndb_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Get all items router.\n    :param skip: The offset used when paging.\n    :param limit: The number of items to retrieve per query.\n    :param db: The database session.\n    \"\"\"\n    items = crud.get_items(db_session, skip=skip, limit=limit)\n    if not items:\n        raise HTTPException(status_code=404, detail=\"No items found\")\n    return items",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "WMRamadan/fastapi-boilerplate",
    "source_file": "api/routers/items.py",
    "complexity_score": 21
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "@router.get(\"/questions/\", response_model=questions_schema.ListQuestionResponse)\ndef read_questions(skip: int = 0, limit: int = 10):\n    \"\"\"\n    Get all questions router.\n    :param skip: The offset used when paging.\n    :param limit: The number of items to retrieve per query.\n    :param mongo_db: The database client.\n    \"\"\"\n    questions = crud.get_questions(skip=skip, limit=limit)\n    if not questions:\n        raise HTTPException(status_code=404, detail=\"No questions found\")\n    return {'status': 'success', 'results': len(questions), 'questions': questions}",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "WMRamadan/fastapi-boilerplate",
    "source_file": "api/routers/questions.py",
    "complexity_score": 14
  },
  {
    "instruction": "Create a FastAPI POST endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@router.post(\"/questions/\", response_model=questions_schema.QuestionResponse)\ndef create_question(question: questions_schema.QuestionBase):\n    \"\"\"\n    Post questions router.\n    :param question: The question schema.\n    \"\"\"\n    res = crud.create_question(question=question)\n    return {\"status\": \"success\", \"question\": res}",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post"
    ],
    "source_repo": "WMRamadan/fastapi-boilerplate",
    "source_file": "api/routers/questions.py",
    "complexity_score": 8
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\"/tasks/\", response_model=List[tasks_schema.Task])\ndef read_tasks(skip: int = 0, limit: int = 100,\ndb_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Get all tasks router.\n    :param skip: The offset used when paging.\n    :param limit: The number of items to retrieve per query.\n    :param db: The database session.\n    \"\"\"\n    tasks = crud.get_tasks(db_session, skip=skip, limit=limit)\n    if not tasks:\n        raise HTTPException(status_code=404, detail=\"No tasks found\")\n    return tasks",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "WMRamadan/fastapi-boilerplate",
    "source_file": "api/routers/tasks.py",
    "complexity_score": 21
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@router.get(\"/tasks/{task_id}\")\ndef read_task(task_id: str):\n    \"\"\"\n    Get task by User ID router.\n    :param task_id: The Task ID.\n    \"\"\"\n    task_result = crud.get_task(task_id=task_id)\n    return task_result",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "WMRamadan/fastapi-boilerplate",
    "source_file": "api/routers/tasks.py",
    "complexity_score": 8
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post(\"/users/\", response_model=users_schema.User)\ndef create_user(user: users_schema.UserCreate, db_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Create user router.\n    :param user: The user schema.\n    :param db_session: The database session.\n    \"\"\"\n    db_user = crud.get_user_by_email(db_session, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db_session=db_session, user=user)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "WMRamadan/fastapi-boilerplate",
    "source_file": "api/routers/users.py",
    "complexity_score": 19
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\"/users/\", response_model=List[users_schema.User])\ndef read_users(skip: int = 0, limit: int = 100,\ndb_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Get all users router.\n    :param skip: The offset used when paging.\n    :param limit: The number of users to retrieve per query.\n    :param db_session: The database session.\n    \"\"\"\n    users = crud.get_users(db_session, skip=skip, limit=limit)\n    if not users:\n        raise HTTPException(status_code=404, detail=\"No users found\")\n    return users",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "WMRamadan/fastapi-boilerplate",
    "source_file": "api/routers/users.py",
    "complexity_score": 21
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\"/users/{user_id}\", response_model=users_schema.User)\ndef read_user(user_id: int, db_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Get user by User ID router.\n    :param user_id: The User ID.\n    :param db_session: The database session.\n    \"\"\"\n    db_user = crud.get_user(db_session, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "WMRamadan/fastapi-boilerplate",
    "source_file": "api/routers/users.py",
    "complexity_score": 19
  },
  {
    "instruction": "Create a FastAPI PATCH endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.patch(\"/users/{user_id}\", response_model=users_schema.User)\ndef update_user(user_id: int, user: users_schema.UserCreate, db_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Update user by User ID router.\n    :param user_id: The User ID.\n    :param db_session: The database session.\n    \"\"\"\n    db_user = crud.update_user(db_session, user_id=user_id, user=user)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "patch",
      "authentication",
      "database"
    ],
    "source_repo": "WMRamadan/fastapi-boilerplate",
    "source_file": "api/routers/users.py",
    "complexity_score": 19
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.delete(\"/users/{user_id}\", response_model=status_schema.Status)\ndef delete_user(user_id: int, db_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Delete user by User ID router.\n    :param user_id: The User ID.\n    :param db_session: The database session.\n    \"\"\"\n\n    db_user = crud.delete_user(db_session, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return status_schema.Status(status=f\"Deleted user {user_id}\")",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "WMRamadan/fastapi-boilerplate",
    "source_file": "api/routers/users.py",
    "complexity_score": 20
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post(\"/users/{user_id}/items/\", response_model=items_schema.Item)\ndef create_item_for_user(user_id: int, item: items_schema.ItemCreate,\ndb_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Create the user item router.\n    :param user_id: The ID of the user.\n    :param item: The item schema.\n    :param db_session: The database session.\n    \"\"\"\n    return crud.create_user_item(db_session=db_session, item=item, user_id=user_id)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "WMRamadan/fastapi-boilerplate",
    "source_file": "api/routers/users.py",
    "complexity_score": 16
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.delete(\"/users/{user_id}/items/{item_id}\", response_model=status_schema.Status)\ndef delete_item_for_user(user_id: int, item_id: int,\ndb_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Delete the user item router.\n    :param user_id: The ID of the user.\n    :param item_id: The ID of the item.\n    :param db_session: The database session.\n    \"\"\"\n    db_item = crud.delete_user_item(db_session=db_session, item_id=item_id, user_id=user_id)\n    if db_item is None:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return status_schema.Status(status=f\"Deleted Item {item_id} for user {user_id}\")",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "WMRamadan/fastapi-boilerplate",
    "source_file": "api/routers/users.py",
    "complexity_score": 21
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post(\"/users/{user_id}/tasks/\", response_model=tasks_schema.Task)\ndef create_task_for_user(user_id: int, task: tasks_schema.TaskCreate,\ndb_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Create the user task router.\n    :param user_id: The ID of the user.\n    :param task: The task schema.\n    :param db_session: The database session.\n    \"\"\"\n    return crud.create_user_task(db_session=db_session, task=task, user_id=user_id)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "WMRamadan/fastapi-boilerplate",
    "source_file": "api/routers/users.py",
    "complexity_score": 16
  },
  {
    "instruction": "Create a FastAPI POST endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.post(\"/user\")\ndef create_user(user: User):\n    try:\n        # Convert email to lowercase\n        user_email = user.email.lower()\n        # Hash password\n        hased_password = bcrypt.hashpw(user.password, bcrypt.gensalt())\n\n        # Check if user already exists\n        if user_exists(value=user_email):\n            return {\"message\": \"User already exists\"}\n\n        # Add user to users table\n        user = supabase.from_(\"users\")\\\n            .insert({\"name\": user.name, \"email\": user_email, \"password\": hased_password})\\\n            .execute()\n        \n        # Check if user was added\n        if user:\n            return {\"message\": \"User created successfully\"}\n        else:\n            return {\"message\": \"User creation failed\"}\n    except Exception as e:\n        print(\"Error: \", e)\n        return {\"message\": \"User creation failed\"}",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "database"
    ],
    "source_repo": "theinfosecguy/python-supabase-crud-api",
    "source_file": "app/main.py",
    "complexity_score": 30
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/user\")\ndef get_user(user_id: Union[str, None] = None):\n    try:\n        if user_id:\n            user = supabase.from_(\"users\")\\\n                .select(\"id\", \"name\", \"email\")\\\n                .eq(\"id\", user_id)\\\n                .execute()\n            \n            if user:\n                return user\n        else:\n            users = supabase.from_(\"users\")\\\n                .select(\"id\", \"email\", \"name\")\\\n                .execute()\n            if users:\n                return users\n    except Exception as e:\n        print(f\"Error: {e}\")\n        return {\"message\": \"User not found\"}",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "theinfosecguy/python-supabase-crud-api",
    "source_file": "app/main.py",
    "complexity_score": 25
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.put(\"/user\")\ndef update_user(user_id: str, email: str, name: str):\n    try:\n        user_email = email.lower()\n\n        # Check if user exists\n        if user_exists(\"id\", user_id):\n            # Check if email already exists\n            email_exists = supabase.from_(\"users\")\\\n                .select(\"*\").eq(\"email\", user_email)\\\n                .execute()\n            if len(email_exists.data) > 0:\n                return {\"message\": \"Email already exists\"}\n\n            # Update user\n            user = supabase.from_(\"users\")\\\n                .update({\"name\": name, \"email\": user_email})\\\n                .eq(\"id\", user_id).execute()\n            if user:\n                return {\"message\": \"User updated successfully\"}\n        else:\n            return {\"message\": \"User update failed\"}\n    except Exception as e:\n        print(f\"Error: {e}\")\n        return {\"message\": \"User update failed\"}",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "put",
      "database"
    ],
    "source_repo": "theinfosecguy/python-supabase-crud-api",
    "source_file": "app/main.py",
    "complexity_score": 30
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.delete(\"/user\")\ndef delete_user(user_id: str):\n    try:        \n        # Check if user exists\n        if user_exists(\"id\", user_id):\n            # Delete user\n            supabase.from_(\"users\")\\\n                .delete().eq(\"id\", user_id)\\\n                .execute()\n            return {\"message\": \"User deleted successfully\"}\n        \n        else:\n            return {\"message\": \"User deletion failed\"}\n    except Exception as e:\n        print(f\"Error: {e}\")\n        return {\"message\": \"User deletion failed\"}",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "delete",
      "database"
    ],
    "source_repo": "theinfosecguy/python-supabase-crud-api",
    "source_file": "app/main.py",
    "complexity_score": 21
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/users/\")\ndef get_all_users(db: Session = Depends(get_db)):\n    return db.query(User).all()",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "BaseMax/SimpleFastPyAPI",
    "source_file": "main.py",
    "complexity_score": 9
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/users/{user_id}\")\ndef get_user_by_email(user_id: int, db: Session = Depends(get_db)):\n    user = db.query(User).filter(User.id == user_id).first()\n    if user:\n        return user\n    raise HTTPException(status_code=404, detail=\"User not found\")",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "BaseMax/SimpleFastPyAPI",
    "source_file": "main.py",
    "complexity_score": 14
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.post(\"/users/\")\ndef create_user(user: UserCreate, db: Session = Depends(get_db)):\n    db_user = User(name=user.name, email=user.email, password=user.password)\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "BaseMax/SimpleFastPyAPI",
    "source_file": "main.py",
    "complexity_score": 13
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.put(\"/users/{user_id}\")\ndef update_user_by_email(user_id: int, user: UserUpdate, db: Session = Depends(get_db)):\n    db_user = db.query(User).filter(User.id == user_id).first()\n    if not db_user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    db_user.name = user.name\n    db_user.email = user.email\n    db.commit()\n    return {\"message\": \"User updated successfully\"}",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "put",
      "authentication",
      "database"
    ],
    "source_repo": "BaseMax/SimpleFastPyAPI",
    "source_file": "main.py",
    "complexity_score": 17
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.delete(\"/users/{user_id}\")\ndef delete_user_by_email(user_id: int, db: Session = Depends(get_db)):\n    db_user = db.query(User).filter(User.id == user_id).first()\n    if not db_user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    db.delete(db_user)\n    db.commit()\n    return {\"message\": \"User deleted successfully\"}",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "BaseMax/SimpleFastPyAPI",
    "source_file": "main.py",
    "complexity_score": 16
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\"/cars/{car_id}\", response_model=Car)\ndef get_car_info(car_id: int, session: Session = Depends(get_db)):\n\n    try:\n        car_info = get_car_info_by_id(session, car_id)\n        return car_info\n    except CarInfoException as cie:\n        raise HTTPException(**cie.__dict__)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "SBalaSundar/fastapi-crud-app-sample",
    "source_file": "api.py",
    "complexity_score": 21
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.put(\"/cars/{car_id}\", response_model=Car)\ndef update_car(car_id: int, new_info: CreateAndUpdateCar, session: Session = Depends(get_db)):\n\n    try:\n        car_info = update_car_info(session, car_id, new_info)\n        return car_info\n    except CarInfoException as cie:\n        raise HTTPException(**cie.__dict__)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "put",
      "authentication",
      "database"
    ],
    "source_repo": "SBalaSundar/fastapi-crud-app-sample",
    "source_file": "api.py",
    "complexity_score": 21
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.delete(\"/cars/{car_id}\")\ndef delete_car(car_id: int, session: Session = Depends(get_db)):\n\n    try:\n        return delete_car_info(session, car_id)\n    except CarInfoException as cie:\n        raise HTTPException(**cie.__dict__)",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "SBalaSundar/fastapi-crud-app-sample",
    "source_file": "api.py",
    "complexity_score": 20
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "    @router.get(\"/cars\", response_model=PaginatedCarInfo)\n    def list_cars(self, limit: int = 10, offset: int = 0):\n\n        cars_list = get_all_cars(self.session, limit, offset)\n        response = {\"limit\": limit, \"offset\": offset, \"data\": cars_list}\n\n        return response",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "SBalaSundar/fastapi-crud-app-sample",
    "source_file": "api.py",
    "complexity_score": 7
  },
  {
    "instruction": "Create a FastAPI POST endpoint with database integration",
    "input": "Include database operations",
    "output": "    @router.post(\"/cars\")\n    def add_car(self, car_info: CreateAndUpdateCar):\n\n        try:\n            car_info = create_car(self.session, car_info)\n            return car_info\n        except CarInfoException as cie:\n            raise HTTPException(**cie.__dict__)",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post",
      "database"
    ],
    "source_repo": "SBalaSundar/fastapi-crud-app-sample",
    "source_file": "api.py",
    "complexity_score": 15
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get('/')\ndef root_api():\n    return {\"message\": \"Welcome to Balasundar's Technical Blog\"}",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "SBalaSundar/fastapi-crud-app-sample",
    "source_file": "main.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/\")\ndef root():\n    return \"todooo\"",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "ben519/todooo",
    "source_file": "main.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.post(\"/todo\", response_model=schemas.ToDo, status_code=status.HTTP_201_CREATED)\ndef create_todo(todo: schemas.ToDoCreate, session: Session = Depends(get_session)):\n\n    # create an instance of the ToDo database model\n    tododb = models.ToDo(task = todo.task)\n\n    # add it to the session and commit it\n    session.add(tododb)\n    session.commit()\n    session.refresh(tododb)\n\n    # return the todo object\n    return tododb",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "ben519/todooo",
    "source_file": "main.py",
    "complexity_score": 19
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/todo/{id}\", response_model=schemas.ToDo)\ndef read_todo(id: int, session: Session = Depends(get_session)):\n\n    # get the todo item with the given id\n    todo = session.query(models.ToDo).get(id)\n\n    # check if todo item with given id exists. If not, raise exception and return 404 not found response\n    if not todo:\n        raise HTTPException(status_code=404, detail=f\"todo item with id {id} not found\")\n\n    return todo",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "ben519/todooo",
    "source_file": "main.py",
    "complexity_score": 21
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.put(\"/todo/{id}\", response_model=schemas.ToDo)\ndef update_todo(id: int, task: str, session: Session = Depends(get_session)):\n\n    # get the todo item with the given id\n    todo = session.query(models.ToDo).get(id)\n\n    # update todo item with the given task (if an item with the given id was found)\n    if todo:\n        todo.task = task\n        session.commit()\n\n    # check if todo item with given id exists. If not, raise exception and return 404 not found response\n    if not todo:\n        raise HTTPException(status_code=404, detail=f\"todo item with id {id} not found\")\n\n    return todo",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "put",
      "authentication",
      "database"
    ],
    "source_repo": "ben519/todooo",
    "source_file": "main.py",
    "complexity_score": 26
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.delete(\"/todo/{id}\", status_code=status.HTTP_204_NO_CONTENT)\ndef delete_todo(id: int, session: Session = Depends(get_session)):\n\n    # get the todo item with the given id\n    todo = session.query(models.ToDo).get(id)\n\n    # if todo item with given id exists, delete it from the database. Otherwise raise 404 error\n    if todo:\n        session.delete(todo)\n        session.commit()\n    else:\n        raise HTTPException(status_code=404, detail=f\"todo item with id {id} not found\")\n\n    return None",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "ben519/todooo",
    "source_file": "main.py",
    "complexity_score": 22
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/todo\", response_model = List[schemas.ToDo])\ndef read_todo_list(session: Session = Depends(get_session)):\n\n    # get all todo items\n    todo_list = session.query(models.ToDo).all()\n\n    return todo_list",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "ben519/todooo",
    "source_file": "main.py",
    "complexity_score": 13
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post('/signup',\n             response_model=LoginReponse,\n             status_code=status.HTTP_201_CREATED,\n             summary='Sign up',\n             tags=['Auth', 'Users'])\ndef signup(user: CreateUser = Body(...)):\n    \"\"\"Sign up route.\n\n    This path operation registers a new user in the app.\n\n    Parameters:\n    - Request body parameters:\n        - user: **UserRegister**\n\n    Returns a json object with the information of the registered user and its credentials.\n    - user: **UserOut**\n    - access_token: **str**\n    - access_token_expiration: **int**\n    - refresh_token: **str**\n    - refresh_token_expiration: **int**\n    \"\"\"\n\n    user_dict = user.dict()\n    user_dict['password'] = hash_password(user_dict['password'])\n\n    try:\n        response = connection.execute(User.insert().values(**user_dict))\n    except IntegrityError as e:\n        str_error = str(e)\n        if 'Duplicate entry' in str_error and 'users.email' in str_error:\n            raise HTTPException(\n                status_code=status.HTTP_409_CONFLICT,\n                detail='Email already registered.') from e\n\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail='Internal server error.') from e\n\n    user_dict['id'] = response.lastrowid\n    user_dict['birth_date'] = str(user_dict['birth_date'])\n    user_dict['created_at'] = str(datetime.utcnow())\n    user_dict['updated_at'] = user_dict['created_at']\n\n    response = {\n        'user': user_dict,\n    }\n    response.update(create_credentials(response['user']))\n\n    return response",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "JoseNoriegaa/platzi-twitter-api-fastapi",
    "source_file": "routes/auth.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post('/login',\n          response_model=LoginReponse,\n          status_code=status.HTTP_200_OK,\n          summary='Login',\n          tags=['Auth', 'Users'])\ndef login(user: LoginRequest = Body(...)):\n    \"\"\"Login route.\n\n    This operation path allows a user to login in the app.\n\n    Parameters:\n    - Request body parameters:\n        - user: **LoginRequest**\n\n    Returns a json object with the information of the logged user.\n    - user: **UserOut**\n    - access_token: **str**\n    - access_token_expiration: **int**\n    - refresh_token: **str**\n    - refresh_token_expiration: **int**\n    \"\"\"\n\n    registed_user = connection.execute(User.select().where(User.c.email == user.email)).fetchone()\n\n    if registed_user is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail='User not found')\n\n\n    password_match = check_password(user.password, registed_user.password)\n\n    if not password_match:\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                            detail='Invalid credentials')\n\n    response = {\n        'user': UserOut(**registed_user),\n    }\n    response.update(create_credentials(response['user']))\n\n    return response",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "JoseNoriegaa/platzi-twitter-api-fastapi",
    "source_file": "routes/auth.py",
    "complexity_score": 43
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post('/refresh',\n             response_model=JWTAccessToken,\n             status_code=status.HTTP_200_OK,\n             summary='Refresh token',\n             tags=['Auth', 'Users'])\ndef refresh_token(refresh_token: BaseJWTRefreshToken = Body(...)):\n    \"\"\"Refresh token route.\n\n    This operation path allows a user to refresh the access token.\n\n    Parameters:\n    - Request body parameters:\n        - refresh_token: **BaseJWTRefreshToken**\n\n    Returns a json object with the new access token information.\n    - access_token: **str**\n    - access_token_expiration: **int**\n    \"\"\"\n\n    decoded_token = verify_token(refresh_token.refresh_token)\n\n    base_exception = HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                            detail='Invalid token')\n\n    if decoded_token is None:\n        raise base_exception\n\n    user = connection.execute(User.select().where(User.c.id == decoded_token['sub'])).fetchone()\n\n    if user is None:\n        raise base_exception\n\n    token, expiration = create_access_token({\n        'sub': user.id,\n        'email': user.email,\n        'name': get_fullname(user),\n    })\n\n    response = {\n        'access_token': token,\n        'access_token_expiration': expiration,\n    }\n\n    return response",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "JoseNoriegaa/platzi-twitter-api-fastapi",
    "source_file": "routes/auth.py",
    "complexity_score": 48
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "@router.get('/',\n            response_model=List[TweetWithRelations],\n            status_code=status.HTTP_200_OK,\n            summary='Get all tweets',\n            tags=['Tweets'])\ndef list_tweets():\n    \"\"\"List tweets.\n\n    This operation path shows all tweets in the app.\n\n    Returns a json with the basic tweet information:\n    - id: **int**\n    - content: **str**\n    - user: **UserOut**\n    - created_at: **datetime**\n    - updated_at: **datetime**\n    \"\"\"\n\n    # TODO: Change the raw query to a SQLAlchemy query\n    query = \"\"\"\n    SELECT\n        t.id as 'id',\n        t.content as 'content',\n        t.created_at as 'created_at',\n        t.updated_at as 'updated_at',\n        u.id as 'user.id',\n        u.first_name as 'user.first_name',\n        u.last_name as 'user.last_name',\n        u.birth_date as 'user.birth_date',\n        u.email as 'user.email',\n        u.created_at as 'user.created_at',\n        u.updated_at as 'user.updated_at'\n    FROM\n        tweets as t\n    INNER JOIN\n        users as u\n    ON\n        t.user_id = u.id;\n    \"\"\"\n\n    response = connection.execute(text(query)).fetchall()\n\n    output = []\n    for record in response:\n        output.append(pydottie.transform(record))\n\n    return output",
    "category": "database",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "JoseNoriegaa/platzi-twitter-api-fastapi",
    "source_file": "routes/tweet.py",
    "complexity_score": 47
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "@router.get('/{id}',\n            response_model=TweetWithRelations,\n            status_code=status.HTTP_200_OK,\n            summary='Get a tweet',\n            tags=['Tweets'])\ndef retrieve_tweet(\n    id: int = Path(...,\n                   title='Tweet ID',\n                   description='The ID of the tweet to retrieve'),\n):\n    \"\"\"Retreive tweet.\n\n    Parameters:\n    - Path parameters:\n        - id: **str**\n\n    Returns a json with the tweet information:\n    - id: **int**\n    - content: **str**\n    - user: **UserOut**\n    - created_at: **datetime**\n    - updated_at: **datetime**\n    \"\"\"\n\n    query = \"\"\"\n    SELECT\n        t.id as 'id',\n        t.content as 'content',\n        t.created_at as 'created_at',\n        t.updated_at as 'updated_at',\n        u.id as 'user.id',\n        u.first_name as 'user.first_name',\n        u.last_name as 'user.last_name',\n        u.birth_date as 'user.birth_date',\n        u.email as 'user.email',\n        u.created_at as 'user.created_at',\n        u.updated_at as 'user.updated_at'\n    FROM\n        tweets as t\n    INNER JOIN\n        users as u\n    ON\n        t.user_id = u.id\n    WHERE\n        t.id = :id\n    ;\n    \"\"\"\n\n    tweet = connection.execute(text(query), id=id).fetchone()\n\n    if not tweet:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail='Tweet not found')\n\n    return pydottie.transform(tweet)",
    "category": "database",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "JoseNoriegaa/platzi-twitter-api-fastapi",
    "source_file": "routes/tweet.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@router.post('/',\n          response_model=TweetOut,\n          status_code=status.HTTP_200_OK,\n          summary='Create a new tweet',\n          tags=['Tweets'])\ndef create_tweet(\n    tweet: BaseTweet = Body(...),\n    request_user: UserSchema = Depends(get_current_user),\n):\n    \"\"\"Creates a tweet.\n\n    This path operation creates a new tweet in the app.\n\n    Parameters:\n    - Request body parameters:\n        - tweet: **BaseTweet**\n\n    Returns a json with the basic tweet information:\n    - id: **int**\n    - content: **str**\n    - created_at: **datetime**\n    - updated_at: **datetime**\n    - user_id: **int**\n    \"\"\"\n\n    # Create tweet\n    tweet_dict = tweet.dict()\n    tweet_dict['user_id'] = request_user.id\n\n    response = connection.execute(Tweet.insert().values(**tweet_dict))\n\n    if response is None or (response.rowcount == 0):\n        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n                            detail='Something went wrong.')\n\n    tweet_dict['id'] = response.lastrowid\n    tweet_dict['created_at'] = datetime.utcnow()\n    tweet_dict['updated_at'] = tweet_dict['created_at']\n\n    return tweet_dict",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "JoseNoriegaa/platzi-twitter-api-fastapi",
    "source_file": "routes/tweet.py",
    "complexity_score": 45
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@router.put('/{id}',\n         response_model=TweetWithRelations,\n         status_code=status.HTTP_200_OK,\n         summary='Update tweet',\n         tags=['Tweets'])\ndef update_tweet(\n    id: str = Path(...,\n                   title='Tweet ID',\n                   description='The ID of the tweet to update'),\n    tweet: BaseTweet = Body(...),\n    request_user: UserSchema = Depends(get_current_user),\n):\n    \"\"\"Update tweet.\n\n    This path operation allows to update the content of a tweet.\n\n    Only the tweet owner can update the tweet.\n\n    Parameters:\n    - Request body parameters:\n        - tweet: **BaseTweet**\n\n    Returns a json with the updated tweet information:\n    - id: **int**\n    - content: **str**\n    - created_at: **datetime**\n    - updated_at: **Optional[datetime]**\n    - user: **UserOut**\n    \"\"\"\n\n    tweet_response = connection.execute(Tweet.select().where(Tweet.c.id == id)).fetchone()\n\n    if tweet_response is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail='Tweet not found')\n\n    if tweet_response.user_id != request_user.id:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,\n                            detail='You are not allowed to update this tweet')\n\n    connection.execute(Tweet.update().where(Tweet.c.id == id).values(**tweet.dict()))\n\n    tweet_dict = {**tweet_response}\n    tweet_dict['updated_at'] = datetime.utcnow()\n    tweet_dict['user'] = request_user\n\n    return tweet_dict",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "put",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "JoseNoriegaa/platzi-twitter-api-fastapi",
    "source_file": "routes/tweet.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@router.delete('/{id}',\n            status_code=status.HTTP_204_NO_CONTENT,\n            summary='Delete tweet',\n            tags=['Tweets'])\ndef delete_tweet(\n    id: int = Path(...,\n                   gt=0,\n                   title='Tweet ID',\n                   description='The ID of the tweet to delete'),\n    request_user: UserSchema = Depends(get_current_user),\n):\n    \"\"\"Delete tweet.\n\n    This path operation deletes a tweet in the app.\n\n    Only the tweet owner can delete the tweet.\n\n    Parameters:\n    - Request body parameters:\n        - tweet: **BaseTweet**\n    \"\"\"\n\n    tweet_response = connection.execute(Tweet.select().where(Tweet.c.id == id)).fetchone()\n\n    if tweet_response is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail='Tweet not found')\n\n    if tweet_response.user_id != request_user.id:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,\n                            detail='You are not allowed to delete this tweet')\n\n    connection.execute(Tweet.delete().where(Tweet.c.id == id))\n\n    return Response(status_code=status.HTTP_204_NO_CONTENT)",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "delete",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "JoseNoriegaa/platzi-twitter-api-fastapi",
    "source_file": "routes/tweet.py",
    "complexity_score": 40
  },
  {
    "instruction": "Create a FastAPI GET endpoint with Pydantic validation and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@router.get('/users/',\n         response_model=List[UserOut],\n         status_code=status.HTTP_200_OK,\n         summary='Get all users',\n         tags=['Users'])\ndef list_users():\n    \"\"\"List all users.\n\n    This path operation shows all users in the app.\n\n    Returns a json object with the information of all users.\n    - id: **int**\n    - first_name: **str**\n    - last_name: **str**\n    - email: **EmailStr**\n    - created_at: **datetime**\n    - updated_at: **datetime**\n    \"\"\"\n\n    response = connection.execute(User.select()).fetchall()\n\n    return response",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "pydantic",
      "database"
    ],
    "source_repo": "JoseNoriegaa/platzi-twitter-api-fastapi",
    "source_file": "routes/user.py",
    "complexity_score": 22
  },
  {
    "instruction": "Create a FastAPI GET endpoint with Pydantic validation and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@router.get('/users/{id}',\n         response_model=UserOut,\n         status_code=status.HTTP_200_OK,\n         summary='Get a user',\n         tags=['Users'])\ndef retrieve_user(\n    id: int = Path(...,\n                   gt=0,\n                   title='User ID',\n                   description='ID of the user to retrieve'),\n):\n    \"\"\"Retrieve user.\n\n    This path operation allows to get the information of a specific user.\n\n    Parameters:\n    - Path parameters:\n        - id: **int**\n\n    Returns a json object with the information of the user.\n    - id: **int**\n    - first_name: **str**\n    - last_name: **str**\n    - email: **EmailStr**\n    - created_at: **datetime**\n    - updated_at: **datetime**\n    \"\"\"\n\n    response = connection.execute(User.select().where(User.c.id == id)).fetchone()\n\n    if response is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail='User not found')\n\n    return response",
    "category": "database",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "pydantic",
      "database"
    ],
    "source_repo": "JoseNoriegaa/platzi-twitter-api-fastapi",
    "source_file": "routes/user.py",
    "complexity_score": 37
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@router.put('/users/{id}',\n         response_model=UserOut,\n         status_code=status.HTTP_200_OK,\n         summary='Update user',\n         tags=['Users'])\ndef update_user(\n    id: int = Path(...,\n                   gt=0,\n                   title='User ID',\n                   description='ID of the user to update'),\n    user: CreateUser = Body(...,),\n    request_user: UserSchema = Depends(get_current_user),\n):\n    \"\"\"Update user.\n\n    This operation path updates the information of a specific user.\n\n    Users can only update their own information.\n\n    Parameters:\n    - Path parameters:\n        - id: **str**\n\n    - Body parameters:\n        - user: **CreateUser**\n\n    Returns the information of the updated user.\n    - id: **int**\n    - first_name: **str**\n    - last_name: **str**\n    - email: **EmailStr**\n    - created_at: **datetime**\n    - updated_at: **datetime**\n    \"\"\"\n\n    user_response = connection.execute(User.select().where(User.c.id == id)).fetchone()\n\n    if user_response is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail='User not found')\n\n    if user_response.id != request_user.id:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,\n                            detail='You are not allowed to perform this action')\n\n    # Update user\n    updated_user = {\n        **user_response,\n        **user.dict(),\n    }\n\n    updated_user['password'] = hash_password(updated_user['password'])\n\n    # Save user\n    try:\n        connection.execute(User.update(User.c.id == id).values(**updated_user))\n    except IntegrityError as e:\n        str_error = str(e)\n        if 'Duplicate entry' in str_error and 'users.email' in str_error:\n            raise HTTPException(\n                status_code=status.HTTP_409_CONFLICT,\n                detail='Email already registered.') from e\n\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail='Internal server error.') from e\n\n    updated_user['updated_at'] = str(datetime.now())\n\n    return updated_user",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "put",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "JoseNoriegaa/platzi-twitter-api-fastapi",
    "source_file": "routes/user.py",
    "complexity_score": 50
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@router.delete('/users/{id}',\n               status_code=status.HTTP_204_NO_CONTENT,\n               summary='Delete user',\n               tags=['Users'])\ndef delete_user(\n    id: int = Path(...,\n                   gt=0,\n                   title='User ID',\n                   description='ID of the user to delete'),\n    request_user: UserSchema = Depends(get_current_user),\n):\n    \"\"\"Delete user.\n\n    This path operation deletes a specific user in the app.\n\n    Users can only delete their own information.\n\n    Parameters:\n    - Path parameters:\n        - id: **str**\n    \"\"\"\n\n    user_response = connection.execute(User.select().where(User.c.id == id)).fetchone()\n\n    if user_response is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail='User not found')\n\n    if user_response.id != request_user.id:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,\n                            detail='You are not allowed to perform this action')\n\n    # Delete user\n    connection.execute(User.delete().where(User.c.id == id))\n\n    return Response(status_code=status.HTTP_204_NO_CONTENT)",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "delete",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "JoseNoriegaa/platzi-twitter-api-fastapi",
    "source_file": "routes/user.py",
    "complexity_score": 41
  },
  {
    "instruction": "Create a FastAPI POST endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.post(\"/users/\", status_code=201)\ndef create_user(user: UserModelRequest):\n    hashed_password = hash_password(user.password)\n    new_user = User(username=user.username, email=user.email, password=hashed_password).save()\n    return new_user.to_mongo().to_dict()  # Convert the user document to a dictionary",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post"
    ],
    "source_repo": "pprunty/motormongo",
    "source_file": "metrics/mongoengine/main.py",
    "complexity_score": 5
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication",
    "input": "Include authentication and authorization",
    "output": "@app.post(\"/user/auth\", status_code=200)\ndef is_authenticated(username: str, password: str):\n    user = User.objects(username=username).first()\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    if not user.verify_password(password):\n        raise HTTPException(status_code=401, detail=\"Unauthorized\")\n    return \"You are authenticated! You can see this!\"",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post",
      "authentication"
    ],
    "source_repo": "pprunty/motormongo",
    "source_file": "metrics/mongoengine/main.py",
    "complexity_score": 10
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/users\")\ndef get_users():\n    users = User.objects.all()\n    return [user.to_mongo().to_dict() for user in users]  # Convert each user document to a dictionary",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "pprunty/motormongo",
    "source_file": "metrics/mongoengine/main.py",
    "complexity_score": 4
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/users/{user_id}\")\ndef get_user(user_id: str):\n    user = User.objects(id=user_id).first()\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return user.to_mongo().to_dict()",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "pprunty/motormongo",
    "source_file": "metrics/mongoengine/main.py",
    "complexity_score": 8
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.put(\"/users/{user_id}\", status_code=200)\ndef update_user(user_id: str, user_data: UserModelRequest):\n    user = User.objects(id=user_id).first()\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    user.update(**user_data.dict(exclude_unset=True))\n    return user.reload().to_mongo().to_dict()",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "put",
      "database"
    ],
    "source_repo": "pprunty/motormongo",
    "source_file": "metrics/mongoengine/main.py",
    "complexity_score": 9
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.delete(\"/users/{user_id}\", status_code=204)\ndef delete_user(user_id: str):\n    user = User.objects(id=user_id).first()\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    user.delete()\n    return {\"status\": \"User deleted successfully\"}",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "delete",
      "database"
    ],
    "source_repo": "pprunty/motormongo",
    "source_file": "metrics/mongoengine/main.py",
    "complexity_score": 9
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/products/{uuid}\", response_model=ProductResponse)\ndef get_product_detail(uuid: str):\n    product = get_product(uuid)\n    if not product:\n        raise HTTPException(status_code=404, detail=\"Product not found\")\n    return product",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "OrderAndCh4oS/iterative-coding-fastapi-crud-autogen",
    "source_file": "out_340/product_handlers.py",
    "complexity_score": 8
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/products\", response_model=List[ProductResponse])\ndef get_product_list():\n    return get_all_products()",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "OrderAndCh4oS/iterative-coding-fastapi-crud-autogen",
    "source_file": "out_340/product_handlers.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI POST endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.post(\"/products\", response_model=ProductResponse)\ndef create_new_product(request: CreateProductRequest):\n    uuid = str(uuid4())\n    now = datetime.now()\n    product = Product(\n        uuid=uuid,\n        name=request.name,\n        description=request.description,\n        createdAt=now,\n        updatedAt=now,\n    )\n    db_create_product(uuid, product)\n    return product",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post",
      "database"
    ],
    "source_repo": "OrderAndCh4oS/iterative-coding-fastapi-crud-autogen",
    "source_file": "out_340/product_handlers.py",
    "complexity_score": 13
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.put(\"/products/{uuid}\", response_model=ProductResponse)\ndef update_existing_product(uuid: str, request: UpdateProductRequest):\n    product = get_product(uuid)\n    if not product:\n        raise HTTPException(status_code=404, detail=\"Product not found\")\n    updated_product = product.copy(update=request.dict(exclude_unset=True))\n    product.updatedAt = datetime.now()\n    update_product(uuid, updated_product)\n    return updated_product",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "put",
      "database"
    ],
    "source_repo": "OrderAndCh4oS/iterative-coding-fastapi-crud-autogen",
    "source_file": "out_340/product_handlers.py",
    "complexity_score": 11
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.delete(\"/products/{uuid}\")\ndef delete_existing_product(uuid: str):\n    product = get_product(uuid)\n    if not product:\n        raise HTTPException(status_code=404, detail=\"Product not found\")\n    db_delete_product(uuid)\n    return {\"detail\": \"Product deleted\"}",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "delete",
      "database"
    ],
    "source_repo": "OrderAndCh4oS/iterative-coding-fastapi-crud-autogen",
    "source_file": "out_340/product_handlers.py",
    "complexity_score": 9
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@router.get(\"/products/{uuid}\", response_model=Product)\ndef get_product_handler(uuid: str) -> Product:\n    product = get_product(uuid)\n    if product is None:\n        raise HTTPException(status_code=404, detail=\"Product not found\")\n    return product.model_dump()",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "OrderAndCh4oS/iterative-coding-fastapi-crud-autogen",
    "source_file": "out_348/product_handlers.py",
    "complexity_score": 8
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@router.get(\"/products\", response_model=List[Product])\ndef get_all_products_handler() -> List[Product]:\n    return [product.model_dump() for product in get_all_products().values()]",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "OrderAndCh4oS/iterative-coding-fastapi-crud-autogen",
    "source_file": "out_348/product_handlers.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI POST endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@router.post(\"/products\", response_model=Product)\ndef create_product_handler(request: CreateProductRequest) -> Product:\n    return create_product(request).model_dump()",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post"
    ],
    "source_repo": "OrderAndCh4oS/iterative-coding-fastapi-crud-autogen",
    "source_file": "out_348/product_handlers.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with database integration",
    "input": "Include database operations",
    "output": "@router.put(\"/products/{uuid}\", response_model=Product)\ndef update_product_handler(uuid: str, request: UpdateProductRequest) -> Product:\n    product = get_product(uuid)\n    if product is None:\n        raise HTTPException(status_code=404, detail=\"Product not found\")\n    return update_product(uuid, request).model_dump()",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "put",
      "database"
    ],
    "source_repo": "OrderAndCh4oS/iterative-coding-fastapi-crud-autogen",
    "source_file": "out_348/product_handlers.py",
    "complexity_score": 8
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with database integration",
    "input": "Include database operations",
    "output": "@router.delete(\"/products/{uuid}\")\ndef delete_product_handler(uuid: str) -> None:\n    product = get_product(uuid)\n    if product is None:\n        raise HTTPException(status_code=404, detail=\"Product not found\")\n    delete_product(uuid)",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "delete",
      "database"
    ],
    "source_repo": "OrderAndCh4oS/iterative-coding-fastapi-crud-autogen",
    "source_file": "out_348/product_handlers.py",
    "complexity_score": 8
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "@router.get(\"/{uuid}\", response_model=ProductResponse)\ndef get_product(uuid: str):\n    product = db.get(uuid)\n    if product is None:\n        raise HTTPException(status_code=404, detail=\"Product not found\")\n    return ProductEntity(**product).model_dump()",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "OrderAndCh4oS/iterative-coding-fastapi-crud-autogen",
    "source_file": "out_436/product_handlers.py",
    "complexity_score": 8
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "@router.get(\"/\", response_model=list[ProductResponse])\ndef get_products():\n    return [ProductEntity(**product).model_dump() for product in db.get_all().values()]",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "OrderAndCh4oS/iterative-coding-fastapi-crud-autogen",
    "source_file": "out_436/product_handlers.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI POST endpoint with database integration",
    "input": "Include database operations",
    "output": "@router.post(\"/\", response_model=ProductResponse)\ndef create_product(product: CreateProductRequest):\n    return ProductEntity(**db.create(product.model_dump())).model_dump()",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post",
      "database"
    ],
    "source_repo": "OrderAndCh4oS/iterative-coding-fastapi-crud-autogen",
    "source_file": "out_436/product_handlers.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with database integration",
    "input": "Include database operations",
    "output": "@router.put(\"/{uuid}\", response_model=ProductResponse)\ndef update_product(uuid: str, product: UpdateProductRequest):\n    try:\n        return ProductEntity(**db.update(uuid, product.model_dump())).model_dump()\n    except ValueError as e:\n        raise HTTPException(status_code=404, detail=str(e))",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "put",
      "database"
    ],
    "source_repo": "OrderAndCh4oS/iterative-coding-fastapi-crud-autogen",
    "source_file": "out_436/product_handlers.py",
    "complexity_score": 13
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with database integration",
    "input": "Include database operations",
    "output": "@router.delete(\"/{uuid}\")\ndef delete_product(uuid: str):\n    try:\n        db.delete(uuid)\n    except ValueError as e:\n        raise HTTPException(status_code=404, detail=str(e))",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "delete",
      "database"
    ],
    "source_repo": "OrderAndCh4oS/iterative-coding-fastapi-crud-autogen",
    "source_file": "out_436/product_handlers.py",
    "complexity_score": 13
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get('/')\ndef read_root():\n    return {\"welcome\": \"Welcome to my API\"}",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "FaztWeb/fastapi-restapi-crud",
    "source_file": "app.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get('/posts')\ndef get_posts():\n    return posts",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "FaztWeb/fastapi-restapi-crud",
    "source_file": "app.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI POST endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.post('/posts')\ndef save_post(post: Post):\n    post.id = str(uuid())\n    posts.append(post.dict())\n    return posts[-1]",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post"
    ],
    "source_repo": "FaztWeb/fastapi-restapi-crud",
    "source_file": "app.py",
    "complexity_score": 5
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get('/posts/{post_id}')\ndef get_post(post_id: str):\n    for post in posts:\n        if post[\"id\"] == post_id:\n            return post\n    raise HTTPException(status_code=404, detail=\"Item not found\")",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "FaztWeb/fastapi-restapi-crud",
    "source_file": "app.py",
    "complexity_score": 8
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.delete('/posts/{post_id}')\ndef delete_post(post_id: str):\n    for index, post in enumerate(posts):\n        if post[\"id\"] == post_id:\n            posts.pop(index)\n            return {\"message\": \"Post has been deleted succesfully\"}\n    raise HTTPException(status_code=404, detail=\"Item not found\")",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "delete",
      "database"
    ],
    "source_repo": "FaztWeb/fastapi-restapi-crud",
    "source_file": "app.py",
    "complexity_score": 9
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.put('/posts/{post_id}')\ndef update_post(post_id: str, updatedPost: Post):\n    for index, post in enumerate(posts):\n        if post[\"id\"] == post_id:\n            posts[index][\"title\"]= updatedPost.dict()[\"title\"]\n            posts[index][\"content\"]= updatedPost.dict()[\"content\"]\n            posts[index][\"author\"]= updatedPost.dict()[\"author\"]\n            return {\"message\": \"Post has been updated succesfully\"}\n    raise HTTPException(status_code=404, detail=\"Item not found\")",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "put",
      "authentication",
      "database"
    ],
    "source_repo": "FaztWeb/fastapi-restapi-crud",
    "source_file": "app.py",
    "complexity_score": 11
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"There\"}",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "abdelhai/fastapi-crud",
    "source_file": "main.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI POST endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.post(\"/users\", status_code=201)\ndef create_user(user: User):\n    u = users.put(user.dict())\n    return u",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post"
    ],
    "source_repo": "abdelhai/fastapi-crud",
    "source_file": "main.py",
    "complexity_score": 4
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/users\")\ndef list_users():\n    us = next(users.fetch())\n    return us",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "abdelhai/fastapi-crud",
    "source_file": "main.py",
    "complexity_score": 4
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/users/{uid}\")\ndef get_user(uid: str):\n    user = users.get(uid)\n    if user:\n        return user\n    return JSONResponse({\"message\": \"user not found\"}, status_code=404)",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "abdelhai/fastapi-crud",
    "source_file": "main.py",
    "complexity_score": 6
  },
  {
    "instruction": "Create a FastAPI PATCH endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.patch(\"/users/{uid}\")\ndef update_user(uid: str, uu: UserUpdate):\n    updates = {k:v for k,v in uu.dict().items() if v is not None}\n    try:\n        users.update(updates, uid)\n        return users.get(uid)\n    except Exception:\n        return JSONResponse({\"message\": \"user not found\"}, status_code=404)",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "patch",
      "database"
    ],
    "source_repo": "abdelhai/fastapi-crud",
    "source_file": "main.py",
    "complexity_score": 13
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.delete(\"/users/{uid}\")\ndef delete_user(uid: str):\n    users.delete(uid)\n    return",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "delete",
      "database"
    ],
    "source_repo": "abdelhai/fastapi-crud",
    "source_file": "main.py",
    "complexity_score": 4
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@movies_router.post(\n    path='/',\n    response_class=PlainTextResponse,\n    status_code=status.HTTP_201_CREATED\n)\ndef insert_movie(movie: MovieBaseSchema = Body(...)):\n    \"\"\"\n    Insert Movie into MongoDB\n    \"\"\"\n    movie_with_embedding = MovieWithEmbeddingSchema.from_base_schema(movie)\n\n    try:\n        res = db_movies_collection.insert_one(movie_with_embedding.model_dump())\n    except DuplicateKeyError:\n        raise HTTPException(status_code=status.HTTP_409_CONFLICT, detail='Movie with the same title already exists')\n    except:\n        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail='Failed to insert movie')\n    else:\n        return PlainTextResponse(content=str(res.inserted_id))",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "pydantic",
      "database"
    ],
    "source_repo": "lukovicaleksa/semantic-search-mongodb-fastapi",
    "source_file": "routes/movies.py",
    "complexity_score": 26
  },
  {
    "instruction": "Create a FastAPI GET endpoint with Pydantic validation and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@movies_router.get(\n    path='/id/{movie_id}',\n    response_model=MovieBaseSchema,\n    status_code=status.HTTP_200_OK\n)\ndef get_movie_by_id(movie_id: str = Path(...)):\n    \"\"\"\n    Get Movie by ID from MongoDB\n    \"\"\"\n    if not ObjectId.is_valid(movie_id):\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail='Invalid movie ID')\n\n    movie = db_movies_collection.find_one({'_id': ObjectId(movie_id)})\n\n    if movie:\n        return MovieBaseSchema(**movie)\n    else:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail='Movie not found')",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "pydantic",
      "database"
    ],
    "source_repo": "lukovicaleksa/semantic-search-mongodb-fastapi",
    "source_file": "routes/movies.py",
    "complexity_score": 20
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with Pydantic validation and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@movies_router.put(\n    path='/id/{movie_id}',\n    response_class=PlainTextResponse,\n    status_code=status.HTTP_200_OK\n)\ndef update_movie_by_id(movie_id: str = Path(...),\n                       updated_movie: MovieBaseSchema = Body(...)):\n    \"\"\"\n    Update Movie by ID in MongoDB\n    \"\"\"\n    if not ObjectId.is_valid(movie_id):\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail='Invalid movie ID')\n\n    existing_movie = db_movies_collection.find_one({'_id': ObjectId(movie_id)})\n    if not existing_movie:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail='Movie not found')\n\n    updated_movie_with_embedding = MovieWithEmbeddingSchema.from_base_schema(updated_movie)\n    res = db_movies_collection.update_one({'_id': ObjectId(movie_id)},\n                                          {'$set': updated_movie_with_embedding.model_dump(exclude={'id', 'created_at'})})\n\n    if res.matched_count == 0 or res.modified_count == 0:\n        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail='Failed to update movie')\n\n    return PlainTextResponse(content='Movie updated successfully')",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "put",
      "pydantic",
      "database"
    ],
    "source_repo": "lukovicaleksa/semantic-search-mongodb-fastapi",
    "source_file": "routes/movies.py",
    "complexity_score": 27
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with database integration",
    "input": "Include database operations",
    "output": "@movies_router.delete(\n    path='/id/{movie_id}',\n    response_class=PlainTextResponse,\n    status_code=status.HTTP_200_OK\n)\ndef delete_movie_by_id(movie_id: str = Path(...)):\n    \"\"\"\n    Delete Movie by ID from MongoDB\n    \"\"\"\n    if not ObjectId.is_valid(movie_id):\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail='Invalid movie ID')\n\n    res = db_movies_collection.delete_one({'_id': ObjectId(movie_id)})\n    if res.deleted_count == 0:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail='Movie not found')\n\n    return PlainTextResponse(content='Movie deleted successfully')",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "delete",
      "database"
    ],
    "source_repo": "lukovicaleksa/semantic-search-mongodb-fastapi",
    "source_file": "routes/movies.py",
    "complexity_score": 19
  },
  {
    "instruction": "Create a FastAPI GET endpoint with Pydantic validation and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@movies_router.get(\n    path='/title',\n    response_model=MovieBaseSchema,\n    status_code=status.HTTP_200_OK\n)\ndef get_movie_by_title(movie_title: str = Query(...)):\n    \"\"\"\n    Get Movie by Title from MongoDB\n    \"\"\"\n    movie = db_movies_collection.find_one({'title': movie_title})\n\n    if movie:\n        return MovieBaseSchema(**movie)\n    else:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail='Movie not found')",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "pydantic",
      "database"
    ],
    "source_repo": "lukovicaleksa/semantic-search-mongodb-fastapi",
    "source_file": "routes/movies.py",
    "complexity_score": 17
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with Pydantic validation and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@movies_router.put(\n    path='/title',\n    response_class=PlainTextResponse,\n    status_code=status.HTTP_200_OK\n)\ndef update_movie_by_title(movie_title: str = Query(...),\n                          updated_movie: MovieBaseSchema = Body(...)):\n    \"\"\"\n    Update Movie by Title in MongoDB\n    \"\"\"\n    existing_movie = db_movies_collection.find_one({'title': movie_title})\n\n    if not existing_movie:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail='Movie not found')\n\n    updated_movie_with_embedding = MovieWithEmbeddingSchema.from_base_schema(updated_movie)\n    res = db_movies_collection.update_one({'title': movie_title},\n                                          {'$set': updated_movie_with_embedding.model_dump(exclude={'id', 'created_at'})})\n\n    if res.matched_count == 0 or res.modified_count == 0:\n        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail='Failed to update movie')\n\n    return PlainTextResponse(content='Movie updated successfully')",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "put",
      "pydantic",
      "database"
    ],
    "source_repo": "lukovicaleksa/semantic-search-mongodb-fastapi",
    "source_file": "routes/movies.py",
    "complexity_score": 25
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with database integration",
    "input": "Include database operations",
    "output": "@movies_router.delete(\n    path='/title',\n    response_class=PlainTextResponse,\n    status_code=status.HTTP_200_OK\n)\ndef delete_movie_by_title(movie_title: str = Query(...)):\n    \"\"\"\n    Delete Movie by Title from MongoDB\n    \"\"\"\n    res = db_movies_collection.delete_one({'title': movie_title})\n\n    if res.deleted_count == 0:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail='Movie not found')\n    else:\n        return PlainTextResponse(content='Movie deleted successfully')",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "delete",
      "database"
    ],
    "source_repo": "lukovicaleksa/semantic-search-mongodb-fastapi",
    "source_file": "routes/movies.py",
    "complexity_score": 17
  },
  {
    "instruction": "Create a FastAPI GET endpoint with Pydantic validation and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@movies_router.get(\n    path='/semantic-search',\n    response_model=list[MovieBaseSchema],\n    status_code=status.HTTP_200_OK\n)\ndef movies_semantic_search(prompt: str = Query(..., title='Search Prompt', max_length=64),\n                           limit: int = Query(..., title='Limit returned documents', ge=1, le=10)):\n    \"\"\"\n    Perform Semantic Search on Movies collection\n    \"\"\"\n    semantic_search_prompt = MoviesSemanticSearchPromptSchema(prompt=prompt, limit=limit)\n\n    # perform vector search\n    res = db_movies_collection.aggregate([\n        {\n            '$vectorSearch': {\n                'index': settings.MONGODB_ATLAS_MOVIES_VECTOR_SEARCH_INDEX_NAME,\n                'path': 'embedding',\n                'queryVector': semantic_search_prompt.generate_embedding_vector(),\n                'numCandidates': semantic_search_prompt.get_optimal_number_of_search_candidates(),\n                'limit': semantic_search_prompt.limit,\n            }\n        }\n    ])\n\n    return [MovieBaseSchema(**movie) for movie in res]",
    "category": "database",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "pydantic",
      "database"
    ],
    "source_repo": "lukovicaleksa/semantic-search-mongodb-fastapi",
    "source_file": "routes/movies.py",
    "complexity_score": 26
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@cache_sample_router.get(\"/get-cache\", tags=[\"Cache-Sample\"])\ndef get_cache():\n    print(\"Request ID:\", request_id_contextvar.get())\n    response = random.randint(100, 1000)  # NOSONAR\n    return {\"random value is\": response}",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "wednesday-solutions/python-fastapi",
    "source_file": "app/routes/cache_router/cache_samples.py",
    "complexity_score": 5
  },
  {
    "instruction": "Create a FastAPI POST endpoint with database integration",
    "input": "Include database operations",
    "output": "@celery_sample_router.post(\"/create-task\", tags=[\"Celery-Sample\"])\ndef create_task():\n    print(\"Request ID:\", request_id_contextvar.get())\n    response = add.delay(10, 20)\n    return {\"task_id\": response.id}",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post",
      "database"
    ],
    "source_repo": "wednesday-solutions/python-fastapi",
    "source_file": "app/routes/celery_router/celery_samples.py",
    "complexity_score": 5
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@home_router.get(\"/sentry-test\", tags=[\"Home\"])\ndef sentry_endpoint():\n    if not settings.SENTRY_DSN:\n        raise HTTPException(status_code=503, detail=\"Sentry is not enabled\")\n    raise CentryTestException(\"Sentry Test\")",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "wednesday-solutions/python-fastapi",
    "source_file": "app/routes/home/home.py",
    "complexity_score": 7
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@user_router.post(\"/register\", tags=[\"Users\"])\ndef register(payload: CreateUser, db: Session = Depends(create_local_session)):\n    response = create_user_dao(data=payload, db_session=db)\n    return response",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "wednesday-solutions/python-fastapi",
    "source_file": "app/routes/users/users.py",
    "complexity_score": 10
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@user_router.post(\"/signin\", tags=[\"Users\"])\ndef login(payload: Login, db: Session = Depends(create_local_session)):\n    response = signin(data=payload, db_session=db)\n    return response",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "wednesday-solutions/python-fastapi",
    "source_file": "app/routes/users/users.py",
    "complexity_score": 10
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@user_router.get(\"/\", tags=[\"Users\"], response_model=Page[UserOutResponse])\ndef list_users(db: Session = Depends(create_local_session)):\n    response = list_users_dao(db_session=db)\n    return response",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "wednesday-solutions/python-fastapi",
    "source_file": "app/routes/users/users.py",
    "complexity_score": 10
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication",
    "input": "Include authentication and authorization",
    "output": "@user_router.get(\"/{user_id}/secure-route/\", tags=[\"Users\"], dependencies=[Depends(get_current_user)])\ndef secure_route(token: Annotated[str, Depends(httpBearerScheme)], user_id: int):\n    return {\"message\": \"If you see this, you're authenticated\"}",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication"
    ],
    "source_repo": "wednesday-solutions/python-fastapi",
    "source_file": "app/routes/users/users.py",
    "complexity_score": 6
  },
  {
    "instruction": "Create a FastAPI POST endpoint with database integration",
    "input": "Include database operations",
    "output": "@app.post(\"/segmentation\")\ndef get_segmentation_map(file: bytes = File(...)):\n    \"\"\"Get segmentation maps from image file\"\"\"\n    segmented_image = get_segments(model, file)\n    bytes_io = io.BytesIO()\n    segmented_image.save(bytes_io, format=\"PNG\")\n    return Response(bytes_io.getvalue(), media_type=\"image/png\")",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post",
      "database"
    ],
    "source_repo": "davidefiocco/streamlit-fastapi-model-serving",
    "source_file": "fastapi/server.py",
    "complexity_score": 7
  },
  {
    "instruction": "Create a FastAPI GET endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@AuthorRouter.get(\"/\", response_model=List[AuthorSchema])\ndef index(\n    name: Optional[str] = None,\n    pageSize: Optional[int] = 100,\n    startIndex: Optional[int] = 0,\n    authorService: AuthorService = Depends(),\n):\n    return [\n        author.normalize()\n        for author in authorService.list(\n            name, pageSize, startIndex\n        )\n    ]",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "0xTheProDev/fastapi-clean-example",
    "source_file": "routers/v1/AuthorRouter.py",
    "complexity_score": 16
  },
  {
    "instruction": "Create a FastAPI GET endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@AuthorRouter.get(\"/{id}\", response_model=AuthorSchema)\ndef get(id: int, authorService: AuthorService = Depends()):\n    return authorService.get(id).normalize()",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "0xTheProDev/fastapi-clean-example",
    "source_file": "routers/v1/AuthorRouter.py",
    "complexity_score": 6
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@AuthorRouter.post(\n    \"/\",\n    response_model=AuthorSchema,\n    status_code=status.HTTP_201_CREATED,\n)\ndef create(\n    author: AuthorPostRequestSchema,\n    authorService: AuthorService = Depends(),\n):\n    return authorService.create(author).normalize()",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "0xTheProDev/fastapi-clean-example",
    "source_file": "routers/v1/AuthorRouter.py",
    "complexity_score": 13
  },
  {
    "instruction": "Create a FastAPI PATCH endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@AuthorRouter.patch(\"/{id}\", response_model=AuthorSchema)\ndef update(\n    id: int,\n    author: AuthorPostRequestSchema,\n    authorService: AuthorService = Depends(),\n):\n    return authorService.update(id, author).normalize()",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "patch",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "0xTheProDev/fastapi-clean-example",
    "source_file": "routers/v1/AuthorRouter.py",
    "complexity_score": 10
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@AuthorRouter.delete(\n    \"/{id}\", status_code=status.HTTP_204_NO_CONTENT\n)\ndef delete(\n    id: int, authorService: AuthorService = Depends()\n):\n    return authorService.delete(id)",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "0xTheProDev/fastapi-clean-example",
    "source_file": "routers/v1/AuthorRouter.py",
    "complexity_score": 10
  },
  {
    "instruction": "Create a FastAPI GET endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@AuthorRouter.get(\n    \"/{id}/books/\", response_model=List[BookSchema]\n)\ndef get_books(\n    id: int, authorService: AuthorService = Depends()\n):\n    return [\n        book.normalize()\n        for book in authorService.get_books(id)\n    ]",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "0xTheProDev/fastapi-clean-example",
    "source_file": "routers/v1/AuthorRouter.py",
    "complexity_score": 13
  },
  {
    "instruction": "Create a FastAPI GET endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@BookRouter.get(\"/\", response_model=List[BookSchema])\ndef index(\n    name: Optional[str] = None,\n    pageSize: Optional[int] = 100,\n    startIndex: Optional[int] = 0,\n    bookService: BookService = Depends(),\n):\n    return [\n        book.normalize()\n        for book in bookService.list(\n            name, pageSize, startIndex\n        )\n    ]",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "0xTheProDev/fastapi-clean-example",
    "source_file": "routers/v1/BookRouter.py",
    "complexity_score": 16
  },
  {
    "instruction": "Create a FastAPI GET endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@BookRouter.get(\"/{id}\", response_model=BookSchema)\ndef get(id: int, bookService: BookService = Depends()):\n    return bookService.get(id).normalize()",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "0xTheProDev/fastapi-clean-example",
    "source_file": "routers/v1/BookRouter.py",
    "complexity_score": 6
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@BookRouter.post(\n    \"/\",\n    response_model=BookSchema,\n    status_code=status.HTTP_201_CREATED,\n)\ndef create(\n    book: BookPostRequestSchema,\n    bookService: BookService = Depends(),\n):\n    return bookService.create(book).normalize()",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "0xTheProDev/fastapi-clean-example",
    "source_file": "routers/v1/BookRouter.py",
    "complexity_score": 13
  },
  {
    "instruction": "Create a FastAPI PATCH endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@BookRouter.patch(\"/{id}\", response_model=BookSchema)\ndef update(\n    id: int,\n    book: BookPostRequestSchema,\n    bookService: BookService = Depends(),\n):\n    return bookService.update(id, book).normalize()",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "patch",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "0xTheProDev/fastapi-clean-example",
    "source_file": "routers/v1/BookRouter.py",
    "complexity_score": 10
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@BookRouter.delete(\n    \"/{id}\", status_code=status.HTTP_204_NO_CONTENT\n)\ndef delete(id: int, bookService: BookService = Depends()):\n    return bookService.delete(id)",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "0xTheProDev/fastapi-clean-example",
    "source_file": "routers/v1/BookRouter.py",
    "complexity_score": 8
  },
  {
    "instruction": "Create a FastAPI GET endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@BookRouter.get(\n    \"/{id}/authors/\", response_model=List[AuthorSchema]\n)\ndef get_authors(\n    id: int, bookService: BookService = Depends()\n):\n    return [\n        author.normalize()\n        for author in bookService.get_authors(id)\n    ]",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "0xTheProDev/fastapi-clean-example",
    "source_file": "routers/v1/BookRouter.py",
    "complexity_score": 13
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@BookRouter.post(\n    \"/{id}/authors/\", response_model=List[AuthorSchema]\n)\ndef add_author(\n    id: int,\n    author: BookAuthorPostRequestSchema,\n    bookService: BookService = Depends(),\n):\n    return [\n        author.normalize()\n        for author in bookService.add_author(id, author)\n    ]",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "0xTheProDev/fastapi-clean-example",
    "source_file": "routers/v1/BookRouter.py",
    "complexity_score": 15
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@BookRouter.delete(\n    \"/{id}/authors/{author_id}\",\n    response_model=List[AuthorSchema],\n)\ndef remove_author(\n    id: int,\n    author_id: int,\n    bookService: BookService = Depends(),\n):\n    return [\n        author.normalize()\n        for author in bookService.remove_author(\n            id, author_id\n        )\n    ]",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "delete",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "0xTheProDev/fastapi-clean-example",
    "source_file": "routers/v1/BookRouter.py",
    "complexity_score": 18
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "oinsd/FastAPI-Learning-Example",
    "source_file": "FastAPI_No.29_SQLDatabases/FastAPI_No.29_SQLDatabases/sql_app/alt_main.py",
    "complexity_score": 14
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/users/\", response_model=List[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "oinsd/FastAPI-Learning-Example",
    "source_file": "FastAPI_No.29_SQLDatabases/FastAPI_No.29_SQLDatabases/sql_app/alt_main.py",
    "complexity_score": 10
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "oinsd/FastAPI-Learning-Example",
    "source_file": "FastAPI_No.29_SQLDatabases/FastAPI_No.29_SQLDatabases/sql_app/alt_main.py",
    "complexity_score": 14
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "oinsd/FastAPI-Learning-Example",
    "source_file": "FastAPI_No.29_SQLDatabases/FastAPI_No.29_SQLDatabases/sql_app/alt_main.py",
    "complexity_score": 11
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/items/\", response_model=List[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "oinsd/FastAPI-Learning-Example",
    "source_file": "FastAPI_No.29_SQLDatabases/FastAPI_No.29_SQLDatabases/sql_app/alt_main.py",
    "complexity_score": 10
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n                                                    # ÁîµÂ≠êÈÇÆ‰ª∂Â∑≤Ê≥®ÂÜå\n    return crud.create_user(db=db, user=user)",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "oinsd/FastAPI-Learning-Example",
    "source_file": "FastAPI_No.29_SQLDatabases/FastAPI_No.29_SQLDatabases/sql_app/main.py",
    "complexity_score": 15
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/users/\", response_model=List[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit) \n    return users",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "oinsd/FastAPI-Learning-Example",
    "source_file": "FastAPI_No.29_SQLDatabases/FastAPI_No.29_SQLDatabases/sql_app/main.py",
    "complexity_score": 10
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/\")\ndef home(request: Request):\n    return templates.TemplateResponse(\"home.html\", context={\"request\": request})",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "testdrivenio/fastapi-celery",
    "source_file": "project/main.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI POST endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.post(\"/tasks\", status_code=201)\ndef run_task(payload = Body(...)):\n    task_type = payload[\"type\"]\n    task = create_task.delay(int(task_type))\n    return JSONResponse({\"task_id\": task.id})",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post"
    ],
    "source_repo": "testdrivenio/fastapi-celery",
    "source_file": "project/main.py",
    "complexity_score": 5
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/tasks/{task_id}\")\ndef get_status(task_id):\n    task_result = AsyncResult(task_id)\n    result = {\n        \"task_id\": task_id,\n        \"task_status\": task_result.status,\n        \"task_result\": task_result.result\n    }\n    return JSONResponse(result)",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "testdrivenio/fastapi-celery",
    "source_file": "project/main.py",
    "complexity_score": 9
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@router.get(\"/example\", tags=[\"example get\"])\ndef example_get():\n    \"\"\"\n    Say hej!\n\n    This will greet you properly\n\n    And this path operation will:\n    * return \"hej!\"\n    \"\"\"\n    return {\"msg\": \"Hej!\"}",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "iwpnd/fastapi-aws-lambda-example",
    "source_file": "example_app/api/api_v1/endpoints/example.py",
    "complexity_score": 11
  },
  {
    "instruction": "Create a FastAPI POST endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@router.post(\"/example\", response_model=OutputExample, tags=[\"example post\"])\ndef example_endpoint(inputs: InputExample):\n    \"\"\"\n    Multiply two values\n\n    This will multiply two inputs.\n\n    And this path operation will:\n    * return a*b\n    \"\"\"\n    return {\"a\": inputs.a, \"b\": inputs.b, \"result\": inputs.a * inputs.b}",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post"
    ],
    "source_repo": "iwpnd/fastapi-aws-lambda-example",
    "source_file": "example_app/api/api_v1/endpoints/example.py",
    "complexity_score": 11
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/ping\")\ndef pong():\n    \"\"\"\n    Sanity check.\n\n    This will let the user know that the service is operational.\n\n    And this path operation will:\n    * show a lifesign\n\n    \"\"\"\n    return {\"ping\": \"pong!\"}",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "iwpnd/fastapi-aws-lambda-example",
    "source_file": "example_app/main.py",
    "complexity_score": 12
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@router.get(\"/\", name=\"home\")\ndef index_page(\n    request: Request,\n):\n    return templates.TemplateResponse(\n        request=request,\n        name=\"index.html\",\n    )",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "mahenzon/FastAPI-base-app",
    "source_file": "fastapi-application/views/__init__.py",
    "complexity_score": 8
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/\")\ndef root():\n    return {\"message\": \"Fast API in Python\"}",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "marciovrl/fastapi",
    "source_file": "app/main.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/user\")\ndef read_user():\n    return api.read_user()",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "marciovrl/fastapi",
    "source_file": "app/main.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/question/{position}\", status_code=200)\ndef read_questions(position: int, response: Response):\n    question = api.read_questions(position)\n\n    if not question:\n        raise HTTPException(status_code=400, detail=\"Error\")\n\n    return question",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "marciovrl/fastapi",
    "source_file": "app/main.py",
    "complexity_score": 10
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/alternatives/{question_id}\")\ndef read_alternatives(question_id: int):\n    return api.read_alternatives(question_id)",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "marciovrl/fastapi",
    "source_file": "app/main.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI POST endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.post(\"/answer\", status_code=201)\ndef create_answer(payload: UserAnswer):\n    payload = payload.dict()\n\n    return api.create_answer(payload)",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post"
    ],
    "source_repo": "marciovrl/fastapi",
    "source_file": "app/main.py",
    "complexity_score": 5
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/result/{user_id}\")\ndef read_result(user_id: int):\n    return api.read_result(user_id)",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "marciovrl/fastapi",
    "source_file": "app/main.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication",
    "input": "Include authentication and authorization",
    "output": "@router.post(\n    '/',\n    response_model=TaskReadModel,\n    status_code=status.HTTP_201_CREATED,\n)\ndef create_task(\n    data: TaskCreateModel,\n    response: Response,\n    request: Request,\n    create_task_use_case: CreateTaskUseCase = Depends(get_create_task_use_case)\n):\n    try:\n        task = create_task_use_case((data, ))\n    except Exception as _exception:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR\n        )\n\n    response.headers['location'] = f\"{request.url.path}{task.id_}\"\n    return task",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "authentication"
    ],
    "source_repo": "AdamHavlicek/fastapi-todo-ddd",
    "source_file": "app/features/task/presentation/routes/create_task_route.py",
    "complexity_score": 30
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.delete(\n    '/{id_}/',\n    response_model=TaskReadModel,\n    status_code=status.HTTP_200_OK,\n    responses={\n        status.HTTP_404_NOT_FOUND: {\n            'model': ErrorMessageTaskNotFound\n        }\n    }\n)\ndef delete_task(\n    id_: int,\n    delete_task_use_case: DeleteTaskUseCase = Depends(get_delete_task_use_case)\n):\n    try:\n        task = delete_task_use_case((id_, ))\n    except TaskNotFoundError:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND\n        )\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR\n        )\n\n    return task",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "AdamHavlicek/fastapi-todo-ddd",
    "source_file": "app/features/task/presentation/routes/delete_task_route.py",
    "complexity_score": 36
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication",
    "input": "Include authentication and authorization",
    "output": "@router.get(\n    '/{id_}/',\n    response_model=TaskReadModel,\n    status_code=status.HTTP_200_OK,\n    responses={\n        status.HTTP_404_NOT_FOUND: {\n            'model': ErrorMessageTaskNotFound\n        }\n    }\n)\ndef get_task(\n    id_: int,\n    get_task_use_case_: GetTaskUseCase = Depends(get_task_use_case)\n):\n    try:\n        task = get_task_use_case_((id_, ))\n    except TaskNotFoundError:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND\n        )\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR\n        )\n\n    return task",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication"
    ],
    "source_repo": "AdamHavlicek/fastapi-todo-ddd",
    "source_file": "app/features/task/presentation/routes/get_task_route.py",
    "complexity_score": 36
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post(\"/items\",\n             dependencies=[Depends(PermissionChecker([Items.permissions.CREATE]))],\n             response_model=Item, summary=\"Create a new item\",\n             tags=[\"Items\"])\ndef create_item(item: ItemIn, db: Session = Depends(get_db)):\n    \"\"\"\n    Creates a new item.\n    \"\"\"\n    try:\n        item_created = db_crud.create_item(db, item)\n        return item_created\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"An unexpected error occurred. Report this message to support: {e}\")",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "chrisK824/fastapi-rbac-example",
    "source_file": "routers/items.py",
    "complexity_score": 27
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\"/items\",\n            dependencies=[Depends(PermissionChecker([Items.permissions.READ]))],\n            response_model=List[Item], summary=\"Get all items\",\n            tags=[\"Items\"])\ndef get_items(db: Session = Depends(get_db)):\n    \"\"\"\n    Returns all items.\n    \"\"\"\n    try:\n        items = db_crud.get_items(db)\n        return items\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"An unexpected error occurred. Report this message to support: {e}\")",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "chrisK824/fastapi-rbac-example",
    "source_file": "routers/items.py",
    "complexity_score": 27
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.delete(\"/items/{item_id}\",\n               dependencies=[Depends(PermissionChecker([Items.permissions.DELETE]))],\n               summary=\"Delete an item\", tags=[\"Items\"])\ndef delete_item(item_id: int, db: Session = Depends(get_db)):\n    \"\"\"\n    Deletes an item.\n    \"\"\"\n    try:\n        db_crud.delete_item(db, item_id)\n        return {\"result\": f\"Item with ID {item_id} has been deleted successfully!\"}\n    except ValueError as e:\n        raise HTTPException(\n            status_code=404, detail=f\"{e}\")\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"An unexpected error occurred. Report this message to support: {e}\")",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "chrisK824/fastapi-rbac-example",
    "source_file": "routers/items.py",
    "complexity_score": 29
  },
  {
    "instruction": "Create a FastAPI PATCH endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.patch(\"/items/{item_id}\",\n              dependencies=[Depends(PermissionChecker([Items.permissions.READ, Items.permissions.UPDATE]))],\n              response_model=Item,\n              summary=\"Update an item\", tags=[\"Items\"])\ndef update_operating_spot(item_id: int, item_update: ItemUpdate,\n                          db: Session = Depends(get_db)):\n    \"\"\"\n    Updates an item.\n    \"\"\"\n    try:\n        item = db_crud.update_item(db, item_id, item_update)\n        return item\n    except ValueError as e:\n        raise HTTPException(\n            status_code=404, detail=f\"{e}\")\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"An unexpected error occurred. Report this message to support: {e}\")",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "patch",
      "authentication",
      "database"
    ],
    "source_repo": "chrisK824/fastapi-rbac-example",
    "source_file": "routers/items.py",
    "complexity_score": 31
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post(\"/users\",\n             dependencies=[Depends(PermissionChecker([Users.permissions.CREATE]))],\n             response_model=User, summary=\"Register a user\", tags=[\"Users\"])\ndef create_user(user_signup: UserSignUp, db: Session = Depends(get_db)):\n    \"\"\"\n    Registers a user.\n    \"\"\"\n    try:\n        user_created = db_crud.add_user(db, user_signup)\n        return user_created\n    except db_crud.DuplicateError as e:\n        raise HTTPException(status_code=403, detail=f\"{e}\")\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"An unexpected error occurred. Report this message to support: {e}\")",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "chrisK824/fastapi-rbac-example",
    "source_file": "routers/users.py",
    "complexity_score": 28
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\"/users\",\n            dependencies=[Depends(PermissionChecker([Users.permissions.READ]))],\n            response_model=List[User], summary=\"Get all users\", tags=[\"Users\"])\ndef get_users(db: Session = Depends(get_db)):\n    \"\"\"\n    Returns all users.\n    \"\"\"\n    try:\n        users = db_crud.get_users(db)\n        return users\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"An unexpected error occurred. Report this message to support: {e}\")",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "chrisK824/fastapi-rbac-example",
    "source_file": "routers/users.py",
    "complexity_score": 26
  },
  {
    "instruction": "Create a FastAPI PATCH endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.patch(\"/users\",\n              dependencies=[Depends(PermissionChecker([Users.permissions.READ, Users.permissions.UPDATE]))],\n              response_model=User,\n              summary=\"Update a user\", tags=[\"Users\"])\ndef update_user(user_email: str, user_update: UserUpdate, db: Session = Depends(get_db)):\n    \"\"\"\n    Updates a user.\n    \"\"\"\n    try:\n        user = db_crud.update_user(db, user_email, user_update)\n        return user\n    except ValueError as e:\n        raise HTTPException(\n            status_code=404, detail=f\"{e}\")\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"An unexpected error occurred. Report this message to support: {e}\")",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "patch",
      "authentication",
      "database"
    ],
    "source_repo": "chrisK824/fastapi-rbac-example",
    "source_file": "routers/users.py",
    "complexity_score": 30
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.delete(\"/users\",\n               dependencies=[Depends(PermissionChecker([Users.permissions.DELETE]))],\n               summary=\"Delete a user\", tags=[\"Users\"])\ndef delete_user(user_email: str, db: Session = Depends(get_db)):\n    \"\"\"\n    Deletes a user.\n    \"\"\"\n    try:\n        db_crud.delete_user(db, user_email)\n        return {\"result\": f\"User with email {user_email} has been deleted successfully!\"}\n    except ValueError as e:\n        raise HTTPException(\n            status_code=404, detail=f\"{e}\")\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"An unexpected error occurred. Report this message to support: {e}\")",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "delete",
      "authentication",
      "database"
    ],
    "source_repo": "chrisK824/fastapi-rbac-example",
    "source_file": "routers/users.py",
    "complexity_score": 29
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post(\"/token\", response_model=Token, summary=\"Authorize as a user\", tags=[\"Users\"])\ndef authorize(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):\n    \"\"\"\n    Logs in a user.\n    \"\"\"\n    user = authenticate_user(db=db, user_email=form_data.username, password=form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=401, detail=\"Invalid user email or password.\")\n    try:\n        access_token = create_access_token(data=user.email)\n        return {\n            \"access_token\": access_token,\n            \"token_type\": \"bearer\"\n        }\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"An unexpected error occurred. Report this message to support: {e}\")",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "chrisK824/fastapi-rbac-example",
    "source_file": "routers/users.py",
    "complexity_score": 31
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@router.post(\"/login/\", response_model=TokenInfo)\ndef auth_user_issue_jwt(\n    user: UserSchema = Depends(validate_auth_user),\n):\n    access_token = create_access_token(user)\n    refresh_token = create_refresh_token(user)\n    return TokenInfo(\n        access_token=access_token,\n        refresh_token=refresh_token,\n    )",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "mahenzon/micro-shop",
    "source_file": "api_v1/demo_auth/demo_jwt_auth.py",
    "complexity_score": 17
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation and with authentication and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@router.post(\n    \"/refresh/\",\n    response_model=TokenInfo,\n    response_model_exclude_none=True,\n)\ndef auth_refresh_jwt(\n    # todo: validate user is active!!\n    user: UserSchema = Depends(get_current_auth_user_for_refresh),\n    # user: UserSchema = Depends(get_auth_user_from_token_of_type(REFRESH_TOKEN_TYPE)),\n    # user: UserSchema = Depends(UserGetterFromToken(REFRESH_TOKEN_TYPE)),\n):\n    access_token = create_access_token(user)\n    return TokenInfo(\n        access_token=access_token,\n    )",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "pydantic",
      "authentication",
      "database"
    ],
    "source_repo": "mahenzon/micro-shop",
    "source_file": "api_v1/demo_auth/demo_jwt_auth.py",
    "complexity_score": 22
  },
  {
    "instruction": "Create a FastAPI GET endpoint with Pydantic validation and with authentication",
    "input": "Include proper request validation",
    "output": "@router.get(\"/users/me/\")\ndef auth_user_check_self_info(\n    payload: dict = Depends(get_current_token_payload),\n    user: UserSchema = Depends(get_current_active_auth_user),\n):\n    iat = payload.get(\"iat\")\n    return {\n        \"username\": user.username,\n        \"email\": user.email,\n        \"logged_in_at\": iat,\n    }",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "pydantic",
      "authentication"
    ],
    "source_repo": "mahenzon/micro-shop",
    "source_file": "api_v1/demo_auth/demo_jwt_auth.py",
    "complexity_score": 14
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication",
    "input": "Include authentication and authorization",
    "output": "@router.get(\"/basic-auth/\")\ndef demo_basic_auth_credentials(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    return {\n        \"message\": \"Hi!\",\n        \"username\": credentials.username,\n        \"password\": credentials.password,\n    }",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication"
    ],
    "source_repo": "mahenzon/micro-shop",
    "source_file": "api_v1/demo_auth/views.py",
    "complexity_score": 12
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication",
    "input": "Include authentication and authorization",
    "output": "@router.get(\"/basic-auth-username/\")\ndef demo_basic_auth_username(\n    auth_username: str = Depends(get_auth_user_username),\n):\n    return {\n        \"message\": f\"Hi, {auth_username}!\",\n        \"username\": auth_username,\n    }",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication"
    ],
    "source_repo": "mahenzon/micro-shop",
    "source_file": "api_v1/demo_auth/views.py",
    "complexity_score": 11
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication",
    "input": "Include authentication and authorization",
    "output": "@router.get(\"/some-http-header-auth/\")\ndef demo_auth_some_http_header(\n    username: str = Depends(get_username_by_static_auth_token),\n):\n    return {\n        \"message\": f\"Hi, {username}!\",\n        \"username\": username,\n    }",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication"
    ],
    "source_repo": "mahenzon/micro-shop",
    "source_file": "api_v1/demo_auth/views.py",
    "complexity_score": 11
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication",
    "input": "Include authentication and authorization",
    "output": "@router.post(\"/login-cookie/\")\ndef demo_auth_login_set_cookie(\n    response: Response,\n    # auth_username: str = Depends(get_auth_user_username),\n    username: str = Depends(get_username_by_static_auth_token),\n):\n    session_id = generate_session_id()\n    COOKIES[session_id] = {\n        \"username\": username,\n        \"login_at\": int(time()),\n    }\n    response.set_cookie(COOKIE_SESSION_ID_KEY, session_id)\n    return {\"result\": \"ok\"}",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "authentication"
    ],
    "source_repo": "mahenzon/micro-shop",
    "source_file": "api_v1/demo_auth/views.py",
    "complexity_score": 16
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication",
    "input": "Include authentication and authorization",
    "output": "@router.get(\"/check-cookie/\")\ndef demo_auth_check_cookie(\n    user_session_data: dict = Depends(get_session_data),\n):\n    username = user_session_data[\"username\"]\n    return {\n        \"message\": f\"Hello, {username}!\",\n        **user_session_data,\n    }",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication"
    ],
    "source_repo": "mahenzon/micro-shop",
    "source_file": "api_v1/demo_auth/views.py",
    "complexity_score": 12
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.get(\"/logout-cookie/\")\ndef demo_auth_logout_cookie(\n    response: Response,\n    session_id: str = Cookie(alias=COOKIE_SESSION_ID_KEY),\n    user_session_data: dict = Depends(get_session_data),\n):\n    COOKIES.pop(session_id)\n    response.delete_cookie(COOKIE_SESSION_ID_KEY)\n    username = user_session_data[\"username\"]\n    return {\n        \"message\": f\"Bye, {username}!\",\n    }",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "mahenzon/micro-shop",
    "source_file": "api_v1/demo_auth/views.py",
    "complexity_score": 15
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@router.get(\"/\")\ndef list_items():\n    return [\n        \"Item1\",\n        \"Item2\",\n        \"Item3\",\n    ]",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "mahenzon/micro-shop",
    "source_file": "items_views.py",
    "complexity_score": 7
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@router.get(\"/latest/\")\ndef get_latest_item():\n    return {\"item\": {\"id\": \"0\", \"name\": \"latest\"}}",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "mahenzon/micro-shop",
    "source_file": "items_views.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@router.get(\"/{item_id}/\")\ndef get_item_by_id(item_id: Annotated[int, Path(ge=1, lt=1_000_000)]):\n    return {\n        \"item\": {\n            \"id\": item_id,\n        },\n    }",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "mahenzon/micro-shop",
    "source_file": "items_views.py",
    "complexity_score": 7
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with database integration",
    "input": "Include database operations",
    "output": "@router.put(\"/password/update\", status_code=204)\r\ndef update_password(dto: dto.UserUpdatePassDTO, user: dependencies.user_dependency):\r\n    user_service.update_password(user, dto)\r",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "put",
      "database"
    ],
    "source_repo": "ViktorViskov/fastapi-mvc",
    "source_file": "app/controllers/api/auth_controller.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI POST endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@router.post(\"/password/reset\", status_code=204)\r\ndef reset_password(email: str):\r\n    user_service.reset_password(email)",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post"
    ],
    "source_repo": "ViktorViskov/fastapi-mvc",
    "source_file": "app/controllers/api/auth_controller.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@router.get(\"/me\", response_model=dto.UserDTO)\ndef get_me(user: dependencies.user_dependency):\n    return user",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "ViktorViskov/fastapi-mvc",
    "source_file": "app/controllers/api/user_controller.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@router.get(\"/all\", response_model=list[dto.UserDTO])\ndef get_all(limit: int = Query(1000, gt=0), offset: int = Query(0, ge=0)):\n    return user_service.get_all(limit, offset)",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "ViktorViskov/fastapi-mvc",
    "source_file": "app/controllers/api/user_controller.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@router.get(\"/admin_only\", response_model=dto.UserDTO)\ndef get_admin_only(user: dependencies.admin_dependency):\n    return user",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "ViktorViskov/fastapi-mvc",
    "source_file": "app/controllers/api/user_controller.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@router.get(\"/{id}\", response_model=dto.UserDTO)\ndef get_by_id(id: int = Path(ge=1)):\n    return user_service.get_by_id(id)",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "ViktorViskov/fastapi-mvc",
    "source_file": "app/controllers/api/user_controller.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@router.get(\"/email/{email}\", response_model=dto.UserDTO)\ndef get_by_email(email: str):\n    return user_service.get_by_email(email)",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "ViktorViskov/fastapi-mvc",
    "source_file": "app/controllers/api/user_controller.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@router.get(\"/\")\ndef main(req: Request):\n    return main_view.main_page(req)",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "ViktorViskov/fastapi-mvc",
    "source_file": "app/controllers/pages/page_controller.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication",
    "input": "Include authentication and authorization",
    "output": "@router.get(\"/check\")\ndef check(req: Request, user: user_dependency):\n    return main_view.auth_page(req, user)",
    "category": "authentication",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "authentication"
    ],
    "source_repo": "ViktorViskov/fastapi-mvc",
    "source_file": "app/controllers/pages/page_controller.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI GET endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@app.get(\"/\", response_class=HTMLResponse, summary=\"Home page\")\ndef home_page(request: Request, db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    \"\"\"\n    Returns all users.\n    \"\"\"\n    versions = {\n        \"fastapi_version\": version('fastapi'),\n        \"fastapi_sso_version\": version('fastapi_sso')\n    }\n    try:\n        if user is not None:\n            users_stats = db_crud.get_users_stats(db)\n            response = templates.TemplateResponse(\"index.html\", {\"request\": request, \"user\": user, \"users_stats\": users_stats, **versions})\n        else:\n            response = templates.TemplateResponse(\"login.html\", {\"request\": request, **versions})\n        return response\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"An unexpected error occurred. Report this message to support: {e}\")",
    "category": "authentication",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "get",
      "authentication",
      "database"
    ],
    "source_repo": "chrisK824/fastapi-sso-example",
    "source_file": "main.py",
    "complexity_score": 32
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/privacy_policy\", response_class=HTMLResponse, summary=\"Privacy Policy\")\ndef privacy_policy(request: Request):\n    \"\"\"\n    Returns privacy policy page.\n    \"\"\"\n    try:\n        response = templates.TemplateResponse(\n            \"privacy_policy.html\",\n            {\n                \"request\": request,\n                \"host\": os.getenv('HOST'),\n                \"contact_email\": os.getenv('CONTACT_EMAIL')\n            }\n        )\n        return response\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"An unexpected error occurred. Report this message to support: {e}\")",
    "category": "endpoints",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "chrisK824/fastapi-sso-example",
    "source_file": "main.py",
    "complexity_score": 25
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post(\"/sign_up\", response_model=User, summary=\"Register a user\", tags=[\"Auth\"])\ndef create_user(user_signup: UserSignUp, db: Session = Depends(get_db)):\n    \"\"\"\n    Registers a user.\n    \"\"\"\n    try:\n        user_created = db_crud.add_user(db, user_signup)\n        return user_created\n    except db_crud.DuplicateError as e:\n        raise HTTPException(status_code=403, detail=f\"{e}\")\n    except ValueError as e:\n        raise HTTPException(status_code=400, detail=f\"{e}\")\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"An unexpected error occurred. Report this message to support: {e}\")",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "chrisK824/fastapi-sso-example",
    "source_file": "routers/auth.py",
    "complexity_score": 28
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post(\"/login\", summary=\"Login as a user\", tags=[\"Auth\"])\ndef login(response: RedirectResponse, username: str = Form(...), password: str = Form(...), db: Session = Depends(get_db)):\n    \"\"\"\n    Logs in a user.\n    \"\"\"\n    user = authenticate_user(db=db, username=username, password=password, provider='local')\n    if not user:\n        raise HTTPException(\n            status_code=401, detail=\"Invalid username or password.\")\n    try:\n        access_token = create_access_token(username=user.username, provider='local')\n        response = RedirectResponse(url=\"/\", status_code=status.HTTP_302_FOUND)\n        response.set_cookie(SESSION_COOKIE_NAME, access_token)\n        return response\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"An unexpected error occurred. Report this message to support: {e}\")",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "chrisK824/fastapi-sso-example",
    "source_file": "routers/auth.py",
    "complexity_score": 30
  },
  {
    "instruction": "Create a FastAPI POST endpoint with authentication and with database integration",
    "input": "Include database operations",
    "output": "@router.post(\"/logout\", summary=\"Logout a user\", tags=[\"Auth\"])\ndef logout():\n    \"\"\"\n    Logout a user.\n    \"\"\"\n    try:\n        response = RedirectResponse(url=\"/\", status_code=status.HTTP_302_FOUND)\n        response.delete_cookie(SESSION_COOKIE_NAME)\n        return response\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"An unexpected error occurred. Report this message to support: {e}\")",
    "category": "authentication",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "post",
      "authentication",
      "database"
    ],
    "source_repo": "chrisK824/fastapi-sso-example",
    "source_file": "routers/auth.py",
    "complexity_score": 19
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "    @app.get(\"/\", include_in_schema=False)\n    @jinja.page(\"app_model/device/devices.jinja\")\n    def index() -> list[None]:\n        return []",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "volfpeter/fastapi-htmx-tailwind-example",
    "source_file": "app/api.py",
    "complexity_score": 4
  },
  {
    "instruction": "Create a FastAPI GET endpoint with database integration",
    "input": "Include database operations",
    "output": "    @app.get(\"/ack\", response_model=None, include_in_schema=False)\n    def ack() -> None:\n        # HTMX has no built-in way to trigger changes without making a request.\n        # There are various workarounds, but for simplicity (and to avoid additional\n        # dependencies), this route can be called when no server-side action is needed.\n        # The response code should be 204 for this kind of route, but that also doesn't\n        # trigger the HTMX action in the client, so the default 200 is used instead\n        ...",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "database"
    ],
    "source_repo": "volfpeter/fastapi-htmx-tailwind-example",
    "source_file": "app/api.py",
    "complexity_score": 8
  },
  {
    "instruction": "Create a FastAPI POST endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "    @api.post(\"/\")\n    @jinja.hx(f\"{template_prefix}/device-editor-dialog.jinja\", no_data=True)\n    def new_device_dialog() -> None: ...",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post"
    ],
    "source_repo": "volfpeter/fastapi-htmx-tailwind-example",
    "source_file": "app_model/device/ui_api.py",
    "complexity_score": 3
  },
  {
    "instruction": "Create a FastAPI GET endpoint with Pydantic validation",
    "input": "Include proper request validation",
    "output": "@app.get(\"/todos\")\ndef read_todos():\n    # Read all Todos using the gRPC stub\n    response = stub.List(TodoListResponse())\n    # Convert the gRPC response message to JSON and return it\n    return JSONResponse(content=json.loads(MessageToJson(response)))",
    "category": "validation",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get",
      "pydantic"
    ],
    "source_repo": "AliBigdeli/FastApi-GRPC-Todo-Microservice-App",
    "source_file": "services/todo-api/app/main.py",
    "complexity_score": 6
  },
  {
    "instruction": "Create a FastAPI POST endpoint with Pydantic validation",
    "input": "Include proper request validation",
    "output": "@app.post(\"/todos\")\ndef create_todo(title: str, description: str):\n    # Create a new Todo using the gRPC stub\n    response = stub.Create(TodoRequest(title=title, description=description))\n    # Convert the gRPC response message to JSON and return it\n    return JSONResponse(content=json.loads(MessageToJson(response)))",
    "category": "validation",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "post",
      "pydantic"
    ],
    "source_repo": "AliBigdeli/FastApi-GRPC-Todo-Microservice-App",
    "source_file": "services/todo-api/app/main.py",
    "complexity_score": 6
  },
  {
    "instruction": "Create a FastAPI GET endpoint with Pydantic validation",
    "input": "Include proper request validation",
    "output": "@app.get(\"/todos/{todo_id}\")\ndef read_todo(todo_id: int):\n    # Read a Todo by ID using the gRPC stub\n    try:\n        response = stub.Read(TodoRequest(id=todo_id))\n    \n    except grpc.RpcError as e:\n        if e.code() == grpc.StatusCode.NOT_FOUND:\n            raise HTTPException(status_code=404, detail='Todo not found')\n    # Convert the gRPC response message to JSON and return it\n    return JSONResponse(content=json.loads(MessageToJson(response)))",
    "category": "validation",
    "difficulty": "intermediate",
    "tags": [
      "fastapi",
      "get",
      "pydantic"
    ],
    "source_repo": "AliBigdeli/FastApi-GRPC-Todo-Microservice-App",
    "source_file": "services/todo-api/app/main.py",
    "complexity_score": 18
  },
  {
    "instruction": "Create a FastAPI PUT endpoint with Pydantic validation and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@app.put(\"/todos/{todo_id}\")\ndef update_todo(todo_id: int, title: str = None, description: str = None, done: bool = None):\n    \n    # Check if the Todo object with the given ID exists\n    try:\n        response = stub.Read(TodoRequest(id=todo_id))\n    \n    except grpc.RpcError as e:\n        if e.code() == grpc.StatusCode.NOT_FOUND:\n            raise HTTPException(status_code=404, detail='Todo not found')\n    \n    # Build a TodoRequest message with the updated fields\n    update_fields = {}\n    if title is not None:\n        update_fields[\"title\"] = title\n    if description is not None:\n        update_fields[\"description\"] = description\n    if done is not None:\n        update_fields[\"done\"] = done\n    request = TodoRequest(id=todo_id, **update_fields)\n    # Update the Todo using the gRPC stub\n    response = stub.Update(request)\n    # Convert the gRPC response message to JSON and return it\n    return JSONResponse(content=json.loads(MessageToJson(response)))",
    "category": "database",
    "difficulty": "advanced",
    "tags": [
      "fastapi",
      "put",
      "pydantic",
      "database"
    ],
    "source_repo": "AliBigdeli/FastApi-GRPC-Todo-Microservice-App",
    "source_file": "services/todo-api/app/main.py",
    "complexity_score": 31
  },
  {
    "instruction": "Create a FastAPI DELETE endpoint with Pydantic validation and with database integration",
    "input": "Include proper request validation and database operations",
    "output": "@app.delete(\"/todos/{todo_id}\")\ndef delete_todo(todo_id: int):\n    # Delete a Todo by ID using the gRPC stub\n    response = stub.Delete(TodoRequest(id=todo_id))\n    # Return a 204 No Content response\n    return JSONResponse(content=json.loads(MessageToJson(response)),status_code=204)",
    "category": "database",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "delete",
      "pydantic",
      "database"
    ],
    "source_repo": "AliBigdeli/FastApi-GRPC-Todo-Microservice-App",
    "source_file": "services/todo-api/app/main.py",
    "complexity_score": 6
  },
  {
    "instruction": "Create a FastAPI GET endpoint",
    "input": "Include proper error handling and response formatting",
    "output": "@app.get(\"/healthcheck\")\ndef healthcheck():\n    \"\"\"\n    Check the health of the application.\n    \"\"\"\n    return JSONResponse(content={\"status\": \"ok\"})",
    "category": "endpoints",
    "difficulty": "beginner",
    "tags": [
      "fastapi",
      "get"
    ],
    "source_repo": "AliBigdeli/FastApi-GRPC-Todo-Microservice-App",
    "source_file": "services/todo-api/app/main.py",
    "complexity_score": 6
  }
]